---
rules:
- id: raptor-argv-envp-access
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://www.gnu.org/software/libc/manual/html_node/Program-Arguments.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/argv-envp-access.yaml
  message: The program accesses command-line arguments or environment variables, which
    are controlled by potential attackers.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: argv
    - pattern: envp
- id: raptor-command-injection
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/78
    - https://cwe.mitre.org/data/definitions/88
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/command-injection.yaml
  message: The software constructs an OS command using externally-influenced input,  but
    it does not neutralize or incorrectly neutralizes special elements  that could
    modify the intended OS command.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: system(...)
    - pattern: popen(...)
  - pattern-not: $FUN("...", ...)
- id: raptor-double-free
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/415
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/double-free.yaml
  message: The software calls free() twice on the same memory address, potentially  leading
    to memory corruption. This corruption can cause the program to  crash or cause
    two later calls to malloc() to return the same pointer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern: |
      free($PTR);
      ...
      $FREE($PTR);
  - pattern-not: |
      free($PTR);
      ...
      $PTR = $EXPR;
      ...
      free($PTR);
  - metavariable-pattern:
      metavariable: "$FREE"
      pattern: free
  - focus-metavariable: "$FREE"
- id: raptor-format-string-bugs
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/134
    - https://julianor.tripod.com/bc/formatstring-1.2.pdf
    - http://phrack.org/issues/70/13.html#article
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/format-string-bugs.yaml
  message: The software uses a function that accepts a format string as an argument,
    but the format string originates from an external source. This can lead  to buffer
    overflows, denial of service, or data representation problems.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: printf(...)
      - pattern: vprintf(...)
      - pattern: wprintf(...)
      - pattern: vwprintf(...)
      - pattern: vcprintf(...)
      - pattern: vcwprintf(...)
      - pattern: vscprintf(...)
      - pattern: vscwprintf(...)
      - pattern: printk(...)
      - pattern: scanf(...)
      - pattern: vscanf(...)
      - pattern: wscanf(...)
      - pattern: vwscanf(...)
      - pattern: warn(...)
      - pattern: vwarn(...)
      - pattern: warnx(...)
      - pattern: vwarnx(...)
    - pattern-not: $FUN("...", ...)
  - patterns:
    - pattern-either:
      - pattern: fprintf(...)
      - pattern: vfprintf(...)
      - pattern: fwprintf(...)
      - pattern: vfwprintf(...)
      - pattern: sprintf(...)
      - pattern: vsprintf(...)
      - pattern: asprintf(...)
      - pattern: vasprintf(...)
      - pattern: dprintf(...)
      - pattern: vdprintf(...)
      - pattern: wsprintf(...)
      - pattern: fscanf(...)
      - pattern: vfscanf(...)
      - pattern: fwscanf(...)
      - pattern: vfwscanf(...)
      - pattern: sscanf(...)
      - pattern: vsscanf(...)
      - pattern: swscanf(...)
      - pattern: vswscanf(...)
      - pattern: syslog(...)
      - pattern: vsyslog(...)
      - pattern: err(...)
      - pattern: verr(...)
      - pattern: errx(...)
      - pattern: verrx(...)
      - pattern: warnc(...)
      - pattern: vwarnc(...)
    - pattern-not: $FUN($ARG1, "...", ...)
  - patterns:
    - pattern-either:
      - pattern: snprintf(...)
      - pattern: vsnprintf(...)
      - pattern: swprintf(...)
      - pattern: vswprintf(...)
      - pattern: errc(...)
      - pattern: verrc(...)
    - pattern-not: $FUN($ARG1, $ARG2, "...", ...)
- id: raptor-incorrect-order-setuid-setgid-etc
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/696
    - https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-order-setuid-setgid-etc.yaml
  message: A compromised process might be able to regain elevated group privileges
    if set(e)gid() is called after set(e)uid(). A similar case is when  privileges
    are temporarily dropped with seteuid() and then setuid() or  seteuid() are called
    from while under unprivileged user.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: |
        setuid(...);
        ...
        setgid(...);
    - pattern-not: |
        setuid(0);
        ...
        setgid(...);
  - patterns:
    - pattern: |
        seteuid(...);
        ...
        setegid(...);
    - pattern-not: |
        seteuid(0);
        ...
        setegid(...);
    - pattern-not-inside: |
        seteuid(...);
        ...
        seteuid(0);
        ...
        setegid(...);
  - patterns:
    - pattern: |
        seteuid(...);
        ...
        setuid(...);
    - pattern-not: |
        seteuid(0);
        ...
        setuid(...);
    - pattern-not-inside: |
        seteuid(...);
        ...
        seteuid(0);
        ...
        setuid(...);
  - patterns:
    - pattern: |
        seteuid(...);
        ...
        seteuid(...);
    - pattern-not: |
        seteuid(0);
        ...
        seteuid(...);
    - pattern-not: |
        seteuid(...);
        ...
        seteuid(0);
    - pattern-not-inside: |
        seteuid(...);
        ...
        seteuid(0);
        ...
        seteuid(...);
- id: raptor-incorrect-unsigned-comparison
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/697
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-unsigned-comparison.yaml
  message: Checking if an unsigned variable is negative makes no sense and is usually
    a good indication that something is probably wrong with the code.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(unsigned short $UNSIGNED) < 0"
  - pattern: "(unsigned short int $UNSIGNED) < 0"
  - pattern: "(unsigned int $UNSIGNED) < 0"
  - pattern: "(unsigned long $UNSIGNED) < 0"
  - pattern: "(unsigned long int $UNSIGNED) < 0"
  - pattern: "(size_t $UNSIGNED) < 0"
  - pattern: "(unsigned short $UNSIGNED) <= 0"
  - pattern: "(unsigned short int $UNSIGNED) <= 0"
  - pattern: "(unsigned int $UNSIGNED) <= 0"
  - pattern: "(unsigned long $UNSIGNED) <= 0"
  - pattern: "(unsigned long int $UNSIGNED) <= 0"
  - pattern: "(size_t $UNSIGNED) <= 0"
  - pattern: "(unsigned short $UNSIGNED) >= 0"
  - pattern: "(unsigned short int $UNSIGNED) >= 0"
  - pattern: "(unsigned int $UNSIGNED) >= 0"
  - pattern: "(unsigned long $UNSIGNED) >= 0"
  - pattern: "(unsigned long int $UNSIGNED) >= 0"
  - pattern: "(size_t $UNSIGNED) >= 0"
- id: raptor-incorrect-use-of-free
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/590
    - https://github.com/shellphish/how2heap/blob/master/glibc_2.23/house_of_spirit.c
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-free.yaml
  message: The software calls free() on a pointer to memory that has a short  lifetime
    and was not allocated using associated heap allocation  functions such as malloc(),
    calloc(), or realloc().
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: free($PTR)
    - pattern-either:
      - pattern-inside: |
          $TYPE $PTR[$LEN];
          ...
      - pattern-inside: |
          $TYPE $PTR[$LEN] = $EXPR;
          ...
      - pattern-inside: |
          $TYPE $ARR[$LEN];
          ...
          $PTR = $ARR;
          ...
      - pattern-inside: |
          $TYPE $ARR[$LEN] = $EXPR;
          ...
          $PTR = $ARR;
          ...
  - patterns:
    - pattern: free(&$VAR)
    - pattern-either:
      - pattern-inside: |
          $TYPE $VAR;
          ...
      - pattern-inside: "$TYPE $VAR = $EXPR;\n...          \n"
      - pattern-inside: |
          $TYPE $VAR[$LEN];
          ...
      - pattern-inside: |
          $TYPE $VAR[$LEN] = $EXPR;
          ...
      - pattern-inside: |
          $TYPE * $VAR;
          ...
      - pattern-inside: |
          $TYPE * $VAR = $EXPR;
          ...
- id: raptor-incorrect-use-of-memset
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://lkml.org/lkml/2009/11/11/336
    - https://bugs.mysql.com/bug.php?id=23181
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-memset.yaml
  message: The invocation of memset() is easy to get wrong. The second argument is
    the character and the third argument is the size, but sometimes these arguments
    are in the wrong order. This results in a no-op.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: memset($S, $C, 0);
  - pattern: memset($S, $C, '\0');
  - pattern: memset($S, sizeof(...), $N);
  - pattern: memset_explicit($S, $C, 0);
  - pattern: memset_explicit($S, $C, '\0');
  - pattern: memset_explicit($S, sizeof(...), $N);
- id: raptor-incorrect-use-of-sizeof
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/467
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-sizeof.yaml
  message: The code calls sizeof() on a malloced pointer type, which always returns
    the wordsize/8. This can produce an unexpected result if the programmer intended
    to determine how much memory has been allocated.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: sizeof((char * $PTR))
    - pattern-not: sizeof("...")
  - pattern: sizeof((int * $PTR))
  - pattern: sizeof((float * $PTR))
  - pattern: sizeof((double * $PTR))
  - patterns:
    - pattern: sizeof($PTR)
    - pattern-either:
      - pattern-inside: |
          $TYPE * $PTR;
          ...
      - pattern-inside: |
          $TYPE * $PTR = $EXPR;
          ...
- id: raptor-incorrect-use-of-sprintf-snprintf
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://linux.die.net/man/3/sprintf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-sprintf-snprintf.yaml
  message: C standards specify that the results are undefined if a call to sprintf(),
    snprintf(), vsprintf(), or vsnprintf() would cause copying to take place between
    objects that overlap (e.g., if the target string array and one of the supplied
    input arguments refer to the same buffer).
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: sprintf($DST, ..., $DST, ...)
  - pattern: snprintf($DST, $N, ..., $DST, ...)
- id: raptor-incorrect-use-of-strncat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/787
    - https://cwe.mitre.org/data/definitions/193
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-strncat.yaml
  message: 'The strncat() function is nearly as dangerous as strcat(), in that it''s
    quite easy to misuse. The first common mistake is supplying the size of  the entire
    buffer instead of the size remaining in the buffer. A more  subtle mistake can
    be made: the size parameter needs to be the amount of space left in the buffer
    less one; otherwise, the NUL byte is written  one byte past the end of the buffer.'
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: strncat($DST, $SRC, $LEN)
    - pattern-either:
      - pattern-inside: |
          $TYPE $DST[$LEN];
          ...
      - pattern-inside: |
          $TYPE $DST[$LEN] = $EXPR;
          ...
  - pattern: strncat($DST, $SRC, sizeof($DST))
  - pattern: strncat($DST, $SRC, strlen($DST))
  - pattern: strncat($DST, $SRC, sizeof($DST) - strlen($DST))
- id: raptor-incorrect-use-of-strncpy-stpncpy-strlcpy
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/806
    - https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-strncpy-stpncpy-strlcpy.yaml
  message: The software uses the size of a source buffer when reading from or writing
    to a destination buffer, which may cause it to access memory that is outside of
    the bounds of the buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN($DST, $SRC, $LEN)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: strncpy
        - pattern: stpncpy
        - pattern: strlcpy
        - pattern: strscpy
    - pattern-either:
      - pattern-inside: |
          $TYPE $SRC[$LEN];
          ...
      - pattern-inside: |
          $TYPE $SRC[$LEN] = $EXPR;
          ...
  - patterns:
    - pattern: "$FUN($DST, $SRC, <... $SRC ...>)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: strncpy
        - pattern: stpncpy
        - pattern: strlcpy
        - pattern: strscpy
- id: raptor-insecure-api-access-stat-lstat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/367
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-access-stat-lstat.yaml
  message: The software checks the state of a resource before using it, but the  resource's
    state can change between the check and the use in a way that  invalidates the
    results of the check. This canmcause the software to  perform invalid actions
    when the resource is inman unexpected state.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: access(...)
  - pattern: stat(...)
  - pattern: lstat(...)
- id: raptor-insecure-api-alloca
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/1325
    - https://nullprogram.com/blog/2019/10/28/
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-alloca.yaml
  message: Use of alloca() is unsafe because it cannot ensure that the pointer  returned
    points to a valid and usable block of memory. The allocation  made may exceed
    the bounds of the stack, or even go further into other  objects in memory, and
    alloca() cannot determine such an error.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern: alloca(...)
- id: raptor-insecure-api-atoi-atol-atof
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://rules.sonarsource.com/c/type/Bug/RSPEC-989
    - https://wiki.sei.cmu.edu/confluence/display/c/ERR34-C.+Detect+errors+when+converting+a+string+to+a+number
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-atoi-atol-atof.yaml
  message: The atoi(), atol(), atof(), and similar functions don't handle errors.
    They don't check for integer overflow and can return a negative value.  They have
    undefined behavior if the value of the result cannot be  represented. They return
    0 (or 0.0) if the string does not represent  an integer (or decimal), which is
    indistinguishable from a correctly  formatted, zero-denoting input string.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: atoi(...)
  - pattern: atol(...)
  - pattern: atof(...)
  - pattern: atoll(...)
- id: raptor-insecure-api-gets
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/242
    - https://cwe.mitre.org/data/definitions/120
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-gets.yaml
  message: The gets() function is always unsafe because it does not perform bounds  checking
    on the size of its input. An attacker can easily send  arbitrarily-sized input
    to gets() and overflow the destination buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern: gets(...)
- id: raptor-insecure-api-mktemp-tmpnam-tempnam
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/377
    - https://cwe.mitre.org/data/definitions/367
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-mktemp-tmpnam-tempnam.yaml
  message: Creating and using insecure temporary files can leave application and system
    data vulnerable to attack.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: mktemp(...)
  - pattern: tmpnam(...)
  - pattern: tempnam(...)
- id: raptor-insecure-api-rand-srand
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/338
    - https://cwe.mitre.org/data/definitions/330
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-rand-srand.yaml
  message: The rand() PRNG should not be used in applications intended to be  portable
    when good randomness is needed. Instead, the use of random()  is recommended.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: rand(...)
  - pattern: srand(...)
- id: raptor-insecure-api-scanf-etc
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/120
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-scanf-etc.yaml
  message: A buffer overflow condition exists when a program attempts to put more
    data in a buffer than it can hold, or when a program attempts to put data in a
    memory area outside of the boundaries of a buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: scanf($FMT, ...)
    - pattern: vscanf($FMT, ...)
    - pattern: fscanf($FS, $FMT, ...)
    - pattern: vfscanf($FS, $FMT, ...)
    - pattern: sscanf($BUF, $FMT, ...)
    - pattern: vsscanf($BUF, $FMT, ...)
    - pattern: wscanf($FMT, ...)
    - pattern: vwscanf($FMT, ...)
    - pattern: fwscanf($FS, $FMT, ...)
    - pattern: vfwscanf($FS, $FMT, ...)
    - pattern: swscanf($BUF, $FMT, ...)
    - pattern: vswscanf($BUF, $FMT, ...)
  - metavariable-regex:
      metavariable: "$FMT"
      regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
- id: raptor-insecure-api-signal
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/364
    - https://cwe.mitre.org/data/definitions/479
    - https://cwe.mitre.org/data/definitions/828
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-signal.yaml
  message: The signal() API should be regarded as deprecated. When possible, sigaction()
    should be used instead, because it allows to precisely specify the desired behavior
    in case two signals arrive shortly after each other thus preventing many race
    conditions.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern: signal(...)
- id: raptor-insecure-api-sprintf-vsprintf
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/120
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-sprintf-vsprintf.yaml
  message: A buffer overflow condition exists when a program attempts to put more
    data in a buffer than it can hold, or when a program attempts to put data in a
    memory area outside of the boundaries of a buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: sprintf($BUF, $FMT, ...)
    - pattern: vsprintf($BUF, $FMT, ...)
  - metavariable-regex:
      metavariable: "$FMT"
      regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
- id: raptor-insecure-api-strcpy-stpcpy-strcat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/120
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-strcpy-stpcpy-strcat.yaml
  message: A buffer overflow condition exists when a program attempts to put more
    data in a buffer than it can hold, or when a program attempts to put data in a
    memory area outside of the boundaries of a buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: strcpy(...)
    - pattern: stpcpy(...)
    - pattern: strcat(...)
    - pattern: wcscpy(...)
    - pattern: wcpcpy(...)
    - pattern: wcscat(...)
  - pattern-not: $FUN($BUF, "...", ...)
- id: raptor-integer-truncation
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/197
    - https://cwe.mitre.org/data/definitions/681
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/integer-truncation.yaml
  message: Truncation errors occur when a primitive is cast to a primitive of a  smaller
    size and data is lost in the conversion. The value cannot be  trusted and the
    application will be in an undefined state.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(char $NARROW) = <... (short $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (short int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned short $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned short int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned long int $LARGE) ...>"
  - patterns:
    - pattern-either:
      - pattern: |
          char $FUN(...)
          {
          ...
          return (short $LARGE);
          }
      - pattern: |
          char $FUN(...)
          {
          ...
          return (int $LARGE);
          }
      - pattern: |
          char $FUN(...)
          {
          ...
          return (long $LARGE);
          }
    - focus-metavariable: "$FUN"
  - pattern: "(short $NARROW) = <... (unsigned short $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (unsigned short int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (unsigned long int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(unsigned short int $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(unsigned short int $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(unsigned short int $NARROW) = <... (unsigned long int $LARGE) ...>"
  - patterns:
    - pattern-either:
      - pattern: |
          short $FUN(...)
          {
          ...
          return (int $LARGE);
          }
      - pattern: |
          short $FUN(...)
          {
          ...
          return (long $LARGE);
          }
    - focus-metavariable: "$FUN"
  - pattern: "(int $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (unsigned long int $LARGE) ...>"
  - patterns:
    - pattern: |
        int $FUN(...)
        {
        ...
        return (long $LARGE);
        }
    - focus-metavariable: "$FUN"
  - pattern: "(long $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(long int $NARROW) = <... (unsigned long int $LARGE) ...>"
- id: raptor-integer-wraparound
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/190
    - https://cwe.mitre.org/data/definitions/128
    - https://cwe.mitre.org/data/definitions/131
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - http://www.phrack.org/issues/60/10.html#article
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    - https://dustri.org/b/playing-with-weggli.html
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/integer-wraparound.yaml
  message: The software performs a calculation that can produce an integer overflow
    or wraparound, when the logic assumes that the resulting value will always be
    larger than the original value. This can introduce other weaknesses when the calculation
    is used for resource management or execution control.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN($X * $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($N)"
    - pattern-inside: |
        $N = $X * $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($X + $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($N)"
    - pattern-inside: |
        $N = $X + $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($ARG1, $X * $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
  - patterns:
    - pattern: "$FUN($ARG1, $N)"
    - pattern-inside: |
        $N = $X * $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
  - patterns:
    - pattern: "$FUN($ARG1, $X + $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
  - patterns:
    - pattern: "$FUN($ARG1, $N)"
    - pattern-inside: |
        $N = $X + $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
  - pattern: "$X > $MAX || ($X + $Y) > $MAX"
  - pattern: "$X >= $MAX || ($X + $Y) > $MAX"
  - pattern: "$X > $MAX || ($X + $Y) >= $MAX"
  - pattern: "$X >= $MAX || ($X + $Y) >= $MAX"
  - pattern: "$X < $MAX && ($X + $Y) < $MAX"
  - pattern: "$X <= $MAX && ($X + $Y) < $MAX"
  - pattern: "$X < $MAX && ($X + $Y) <= $MAX"
  - pattern: "$X <= $MAX && ($X + $Y) <= $MAX"
  - pattern: "$X > $MAX || ($X * $Y) > $MAX"
  - pattern: "$X >= $MAX || ($X * $Y) > $MAX"
  - pattern: "$X > $MAX || ($X * $Y) >= $MAX"
  - pattern: "$X >= $MAX || ($X * $Y) >= $MAX"
  - pattern: "$X < $MAX && ($X * $Y) < $MAX"
  - pattern: "$X <= $MAX && ($X * $Y) < $MAX"
  - pattern: "$X < $MAX && ($X * $Y) <= $MAX"
  - pattern: "$X <= $MAX && ($X * $Y) <= $MAX"
- id: raptor-interesting-api-calls
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java
    - https://github.com/x509cert/banned/blob/master/banned.h
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/interesting-api-calls.yaml
  message: Locate all calls to interesting and potentially insecure API functions
    (candidate points). The auditor can backtrace from these candidate points to find
    pathways allowing access from untrusted input.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*set\\w*(u|g)id\\s*$|^\\w*(init|set)groups\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*str\\w?cpy\\s*$|^\\w*stpn?cpy\\s*$|^\\w*wcs\\w?cpy\\s*$|^\\w*wcpn?cpy\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*str\\w?cat\\s*$|^\\w*wcs\\w?cat\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*strtok\\s*$|^\\w*wcstok\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*s\\w?printf\\w*\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*scanf\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*get(s|c|char|pw|pass|wd|cwd|opt|opt_long)\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*(get|set|put|unset)env\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*memc?cpy(_s)?\\s*$|^\\w*memmove(_s)?\\s*$|^\\w*bcopy\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*alloc(a|f)?\\s*$|^\\w*alloc_?array\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*exec(l|v)?(p|e)?e?\\s*$|^\\w*system\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*open(at)?(64)?\\s*$|^\\w*pipe\\s*$|^\\w*read\\s*$|^\\w*recv(from)?\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*fork\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*rand\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*mk\\w?temp(64)?\\s*$|^\\w*te?mpnam\\s*$|^\\w*tmpfile\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*mkdir\\s*$|^\\w*creat\\s*$|^\\w*link(at)?\\s*$|^\\w*rename(at)?\\s*$|^\\w*access(at|_ok)?\\s*$|^\\w*stat(at)?\\s*$|^\\w*ch(own|mod)(at)?\\s*$|^\\w*realpath(at)?\\s*$|^\\w*readlink\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*locale\\s*$|^\\w*(make|split)path\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*copy_(from|to)_user\\s*$|^\\w*(get|put)_user\\s*$|^\\w*copy(in|out)\\s*$"
- id: raptor-memory-address-exposure
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/200
    - https://cwe.mitre.org/data/definitions/209
    - https://cwe.mitre.org/data/definitions/497
    - https://github.com/struct/mms
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/memory-address-exposure.yaml
  message: The software generates an error message that includes sensitive information
    about its environment, users, or associated data. In particular, exposure of memory
    addresses might defeat ASLR.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: printf($FMT, ...)
    - pattern: vprintf($FMT, ...)
    - pattern: wprintf($FMT, ...)
    - pattern: vwprintf($FMT, ...)
    - pattern: vcprintf($FMT, ...)
    - pattern: vcwprintf($FMT, ...)
    - pattern: vscprintf($FMT, ...)
    - pattern: vscwprintf($FMT, ...)
    - pattern: fprintf($ARG1, $FMT, ...)
    - pattern: vfprintf($ARG1, $FMT, ...)
    - pattern: fwprintf($ARG1, $FMT, ...)
    - pattern: vfwprintf($ARG1, $FMT, ...)
    - pattern: sprintf($ARG1, $FMT, ...)
    - pattern: vsprintf($ARG1, $FMT, ...)
    - pattern: asprintf($ARG1, $FMT, ...)
    - pattern: vasprintf($ARG1, $FMT, ...)
    - pattern: dprintf($ARG1, $FMT, ...)
    - pattern: vdprintf($ARG1, $FMT, ...)
    - pattern: wsprintf($ARG1, $FMT, ...)
    - pattern: snprintf($ARG1, $ARG2, $FMT, ...)
    - pattern: vsnprintf($ARG1, $ARG2, $FMT, ...)
    - pattern: swprintf($ARG1, $ARG2, $FMT, ...)
    - pattern: vswprintf($ARG1, $ARG2, $FMT, ...)
  - metavariable-regex:
      metavariable: "$FMT"
      regex: (".*%\w*x.*"|".*%\w*X.*"|".*%\w*p.*")
- id: raptor-mismatched-memory-management
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/762
    - https://cwe.mitre.org/data/definitions/590
    - https://github.com/struct/mms
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/mismatched-memory-management.yaml
  message: The software attempts to return a memory resource to the system, but it
    calls a release function that is not compatible with the function that was originally
    used to allocate that resource. Due to inherent limitations of Semgrep, this rule
    might generate many false positives and should therefore be customized for your
    codebase.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: free($PTR);
    - pattern-not-inside: |
        $PTR = malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = realloc(...);
        ...
        free($PTR);
    - pattern-not-inside: "$PTR = ($CAST)realloc(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strdup(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strndup(...);\n...\nfree($PTR); \n"
- id: raptor-mismatched-memory-management-cpp
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/762
    - https://cwe.mitre.org/data/definitions/590
    - https://github.com/struct/mms
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/mismatched-memory-management-cpp.yaml
  message: The software attempts to return a memory resource to the system, but it
    calls a release function that is not compatible with the function that was originally
    used to allocate that resource. Due to inherent limitations of Semgrep, this rule
    might generate many false positives and should therefore be customized for your
    codebase.
  severity: INFO
  languages:
  - cpp
  pattern-either:
  - patterns:
    - pattern: free($PTR);
    - pattern-not-inside: |
        $PTR = malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = realloc(...);
        ...
        free($PTR);
    - pattern-not-inside: "$PTR = ($CAST)realloc(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strdup(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strndup(...);\n...\nfree($PTR); \n"
  - patterns:
    - pattern: delete[]($PTR);
    - pattern-not-inside: |
        $PTR = new $OBJ[$SIZE];
        ...
        delete[]($PTR);
  - patterns:
    - pattern: delete($PTR);
    - pattern-not-inside: |
        $PTR = new $OBJ;
        ...
        delete($PTR);
  - patterns:
    - pattern: delete($PTR);
    - pattern-inside: |
        $PTR = new $OBJ[$SIZE];
        ...
        delete($PTR);
- id: raptor-missing-break-in-switch
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/484
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://github.com/returntocorp/semgrep/issues/4939
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/missing-break-in-switch.yaml
  message: The software omits a break statement within a switch or similar construct,
    causing code associated with multiple conditions to execute. This can cause problems
    when the programmer only intended to execute code associated with one condition.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern: 'switch ($VAR) { case $VAL1: ... case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... break; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: break; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... exit($RET); case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: exit($RET); case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... return; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: return; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... return $RET; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: return $RET; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... goto $LOC; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: goto $LOC; case $VAL2: ... }

      '
  - focus-metavariable: "$VAR"
- id: raptor-missing-default-in-switch
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/478
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://github.com/returntocorp/semgrep/issues/4939
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/missing-default-in-switch.yaml
  message: The code does not have a default case in an expression with multiple conditions,
    such as a switch statement.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern: 'switch ($VAR) { }

      '
  - pattern-not: 'switch ($VAR) { default: ... }

      '
  - focus-metavariable: "$VAR"
- id: raptor-missing-return
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/393
    - https://cwe.mitre.org/data/definitions/394
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/missing-return.yaml
  message: A non-void function does not have a return statement. Hence, its return
    value can be considered undefined.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern: "$TYPE $FUN($ARG, ...) { ... }"
  - pattern-not: "$TYPE $FUN(...);"
  - pattern-not: "$TYPE $FUN(...) { ... return $RET; }"
  - pattern-not: int main(...) { ... }
  - pattern-not: void $FUN(...) { ... }
  - focus-metavariable: "$FUN"
- id: raptor-off-by-one
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/193
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/off-by-one.yaml
  message: The software calculates or uses an incorrect maximum or minimum value that
    is 1 more, or 1 less, than the correct value.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "$BUF[sizeof($BUF)] = $EXPR"
  - patterns:
    - pattern: "$BUF[$LEN] = $EXPR"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        $BUF[$LEN] = $EXPR;
  - patterns:
    - pattern: "*($BUF + $LEN) = $EXPR\n"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        *($BUF + $LEN) = $EXPR;
  - patterns:
    - pattern: "$BUF[$X][$Y] = $EXPR"
    - pattern-either:
      - pattern-inside: |
          $TYPE $BUF[$A][$Y];
          ...
          $BUF[$X][$Y] = $EXPR;
      - pattern-inside: "$TYPE $BUF[$X][$B];\n...\n$BUF[$X][$Y] = $EXPR;    \n"
  - pattern: strlen($SRC) > sizeof($DST)
  - pattern: strlen($SRC) <= sizeof($DST)
  - pattern: sizeof($DST) < strlen($SRC)
  - pattern: sizeof($DST) >= strlen($SRC)
  - patterns:
    - pattern: strncat($DST, $SRC, $LEN)
    - metavariable-pattern:
        metavariable: "$LEN"
        patterns:
        - pattern-not: "$VAL - 1"
  - pattern: "$STR[strlen($STR) - 1]"
  - pattern: malloc(strlen($STR))
- id: raptor-pointer-subtraction
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/469
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/pointer-subtraction.yaml
  message: The software subtracts one pointer from another in order to determine size,
    but this calculation can be incorrect if the pointers do not exist in the same
    memory chunk.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(char * $PTR1) - (char * $PTR2)"
  - pattern: "(int * $PTR1) - (int * $PTR2)"
  - pattern: "(float * $PTR1) - (float * $PTR2)"
  - pattern: "(double * $PTR1) - (double * $PTR2)"
  - patterns:
    - pattern-either:
      - pattern: "$PTR1 - $PTR2"
      - pattern: "$PTR2 - $PTR1"
    - pattern-either:
      - pattern-inside: |
          $TYPE * $PTR1;
          $TYPE * $PTR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR1 = $EXPR1;
          $TYPE * $PTR2 = $EXPR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR1 = $EXPR1;
          $TYPE * $PTR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR1;
          $TYPE * $PTR2 = $EXPR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR3 = $PTR1;
          $TYPE * $PTR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR2;
          $TYPE * $PTR3 = $PTR1;
          ...
- id: raptor-putenv-stack-var
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/686
    - https://cwe.mitre.org/data/definitions/562
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/putenv-stack-var.yaml
  message: The software calls putenv() with a variable that has a short lifetime,
    such as a pointer to an automatic variable allocated on the stack. The correct
    behavior is to call putenv() with a static/global string.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern: putenv($PTR);
  - pattern-either:
    - pattern-inside: |
        $TYPE $PTR[$LEN];
        ...
    - pattern-inside: |
        $TYPE $PTR[$LEN] = $EXPR;
        ...
    - pattern-inside: |
        $TYPE $ARR[$LEN];
        ...
        $PTR = $ARR;
        ...
    - pattern-inside: |
        $TYPE $ARR[$LEN] = $EXPR;
        ...
        $PTR = $ARR;
        ...
- id: raptor-ret-stack-address
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/562
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    - https://rules.sonarsource.com/c/type/Bug/RSPEC-946
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/ret-stack-address.yaml
  message: A function returns the address of a stack variable, which will cause unintended
    program behavior, typically in the form of a crash.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: return $PTR;
    - pattern-either:
      - pattern-inside: |
          $TYPE $PTR[$LEN];
          ...
      - pattern-inside: |
          $TYPE $PTR[$LEN] = $EXPR;
          ...
      - pattern-inside: |
          $TYPE $ARR[$LEN];
          ...
          $PTR = $ARR;
          ...
      - pattern-inside: |
          $TYPE $ARR[$LEN] = $EXPR;
          ...
          $PTR = $ARR;
          ...
  - patterns:
    - pattern: return &$VAR;
    - pattern-either:
      - pattern-inside: |
          $TYPE $VAR;
          ...
      - pattern-inside: |
          $TYPE $VAR = $EXPR;
          ...
      - pattern-inside: |
          $TYPE $VAR[$LEN];
          ...
      - pattern-inside: |
          $TYPE $VAR[$LEN] = $EXPR;
          ...
      - pattern-inside: |
          $TYPE * $VAR;
          ...
      - pattern-inside: |
          $TYPE * $VAR = $EXPR;
          ...
- id: raptor-signed-unsigned-conversion
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/195
    - https://cwe.mitre.org/data/definitions/196
    - https://cwe.mitre.org/data/definitions/194
    - https://cwe.mitre.org/data/definitions/191
    - https://cwe.mitre.org/data/definitions/681
    - https://cwe.mitre.org/data/definitions/789
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - http://www.phrack.org/issues/60/10.html#article
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/signed-unsigned-conversion.yaml
  message: The software uses a signed primitive and performs a cast to an unsigned
    primitive, or uses an unsigned primitive and performs a cast to a signed primitive,
    which can produce an unexpected value. When the result of a function is to be
    used as a size parameter, using negative return values can have unexpected results.
    Although less frequent an issue, unsigned-to-signed conversion can be  the precursor
    to buffer underwrite conditions. Buffer underwrites  occur frequently when large
    unsigned values are cast to signed values,  and then used as indexes into a buffer
    or for pointer arithmetic.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(unsigned int $UNSIGNED) = <... (int $SIGNED) ...>"
  - pattern: "(unsigned $UNSIGNED) = <... (int $SIGNED) ...>"
  - pattern: "(size_t $UNSIGNED) = <... (int $SIGNED) ...>"
  - pattern: "(size_t $UNSIGNED) = <... (off_t $SIGNED) ...>"
  - patterns:
    - pattern-either:
      - pattern: |
          unsigned int $FUN(...)
          {
          ...
          return (int $SIGNED);
          }
      - pattern: |
          unsigned $FUN(...)
          {
          ...
          return (int $SIGNED);
          }
      - pattern: |
          size_t $FUN(...)
          {
          ...
          return (int $SIGNED);
          }
      - pattern: |
          size_t $FUN(...)
          {
          ...
          return (off_t $SIGNED);
          }
    - focus-metavariable: "$FUN"
  - pattern: strncpy($DST, $SRC, (int $LEN))
  - pattern: stpncpy($DST, $SRC, (int $LEN))
  - pattern: strncat($DST, $SRC, (int $LEN))
  - pattern: strlcpy($DST, $SRC, (int $LEN))
  - pattern: strscpy($DST, $SRC, (int $LEN))
  - pattern: strlcat($DST, $SRC, (int $LEN))
  - pattern: snprintf($BUF, (int $LEN), ...)
  - pattern: vsnprintf($BUF, (int $LEN), ...)
  - pattern: getcwd($BUF, (int $LEN))
  - pattern: memcpy($DST, $SRC, (int $LEN))
  - pattern: memccpy($DST, $SRC, $CHAR, (int $LEN))
  - pattern: memmove($DST, $SRC, (int $LEN))
  - pattern: memset($DST, $CHAR, (int $LEN))
  - pattern: bcopy($SRC, $DST, (int $LEN))
  - pattern: alloca((int $LEN))
  - pattern: malloc((int $LEN))
  - pattern: calloc($CNT, (int $LEN))
  - pattern: calloc((int $CNT), $LEN)
  - pattern: realloc($PTR, (int $LEN))
  - pattern: read($FD, $BUF, (int $LEN))
  - pattern: recv($SD, $BUF, (int $LEN), $FL)
  - pattern: recvfrom($SD, $BUF, (int $LEN), $FL, ...)
  - pattern: fread($PTR, (int $LEN), $NITEMS, $FS)
  - pattern: "(int $SIGNED) = <... (unsigned int $UNSIGNED) ...>"
  - pattern: "(int $SIGNED) = <... (unsigned $UNSIGNED) ...>"
  - pattern: "(int $SIGNED) = <... (size_t $UNSIGNED) ...>"
  - pattern: "(off_t $SIGNED) = <... (size_t $UNSIGNED) ...>"
  - patterns:
    - pattern-either:
      - pattern: |
          int $FUN(...)
          {
          ...
          return (unsigned int $UNSIGNED);
          }
      - pattern: |
          int $FUN(...)
          {
          ...
          return (unsigned $UNSIGNED);
          }
      - pattern: |
          int $FUN(...)
          {
          ...
          return (size_t $UNSIGNED);
          }
      - pattern: |
          off_t $FUN(...)
          {
          ...
          return (size_t $UNSIGNED);
          }
    - focus-metavariable: "$FUN"
- id: raptor-suspicious-assert
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://legends2k.github.io/note/assert_vs_if/
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/suspicious-assert.yaml
  message: Most codebases define assertion macros which compile to a no-op on non-debug
    builds. If assertions are the only line of defense against untrusted input, the
    software may be exposed to attacks that leverage the lack of proper input checks.
  severity: WARNING
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: "$ASSERT(..., <... $A < $B ...>, ...)"
    - pattern: "$ASSERT(..., <... $A <= $B ...>, ...)"
    - pattern: "$ASSERT(..., <... $A > $B ...>, ...)"
    - pattern: "$ASSERT(..., <... $A >= $B ...>, ...)"
  - metavariable-regex:
      metavariable: "$ASSERT"
      regex: "(?i)^\\w*assert\\w*\\s*$"
- id: raptor-typos
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/480
    - https://cwe.mitre.org/data/definitions/481
    - https://cwe.mitre.org/data/definitions/482
    - https://cwe.mitre.org/data/definitions/483
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/typos.yaml
  message: The programmer accidentally uses the wrong operator, which changes the
    application logic in security-relevant ways. This rule also covers some other
    common typo patterns.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: for ($EXPR1 == $EXPR2; $EXPR3; $EXPR4) ...
  - patterns:
    - pattern: "$EXPR1 == $EXPR2;"
    - pattern-not-inside: return $EXPR;
    - pattern-not-inside: assert(...);
  - patterns:
    - pattern: if (<... $EXPR1 = $EXPR2 ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) == $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) != $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) < $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) <= $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) > $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) >= $EXPR ...>) ...
  - patterns:
    - pattern: if (<... $EXPR1 & $EXPR2 ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) == $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) != $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) < $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) <= $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) > $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) >= $EXPR ...>) ...
  - patterns:
    - pattern: if (<... $EXPR1 | $EXPR2 ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) == $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) != $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) < $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) <= $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) > $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) >= $EXPR ...>) ...
  - pattern: "$EXPR1 =+ $EXPR2"
  - pattern: "($EXPR && $EXPR)"
  - pattern: "($EXPR || $EXPR)"
  - pattern: "($EXPR == $EXPR)"
  - pattern: "($EXPR != $EXPR)"
  - pattern: "($EXPR < $EXPR)"
  - pattern: "($EXPR <= $EXPR)"
  - pattern: "($EXPR > $EXPR)"
  - pattern: "($EXPR >= $EXPR)"
  - pattern: "(char * $PTR) = '\\0'"
  - pattern: "(char * $PTR) == '\\0'"
  - pattern: "(char * $PTR) != '\\0'"
  - pattern: if (<... strcpy(...) ...>) ...
  - pattern: if (<... strncpy(...) ...>) ...
  - pattern: if ($COND);
  - pattern: for ($EXPR1; $EXPR2; $EXPR3);
  - patterns:
    - pattern-either:
      - pattern: "$TYPE $ARR[$LEN];"
      - pattern: "$TYPE $ARR[$LEN] = $EXPR;"
    - metavariable-regex:
        metavariable: "$LEN"
        regex: "^0[^xX].*"
- id: raptor-unchecked-ret-malloc-calloc-realloc
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/252
    - https://cwe.mitre.org/data/definitions/690
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unchecked-ret-malloc-calloc-realloc.yaml
  message: The software does not check the return value from a method or function,
    which can prevent it from detecting unexpected states and conditions.
  severity: WARNING
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: "$RET = $FUN(...)"
    - pattern: "$RET = ($CAST)$FUN(...)"
  - metavariable-pattern:
      metavariable: "$FUN"
      pattern-either:
      - pattern: malloc
      - pattern: calloc
      - pattern: realloc
      - pattern: reallocf
      - pattern: valloc
      - pattern: aligned_alloc
      - pattern: strdup
      - pattern: strndup
  - pattern-not-inside: |
      $FUN(...);
      ...
      if (<... $RET == NULL ...>) ...
  - pattern-not-inside: |
      $FUN(...);
      ...
      if (<... NULL == $RET ...>) ...
  - pattern-not-inside: |
      $FUN(...);
      ...
      if (<... $RET != NULL ...>) ...
  - pattern-not-inside: |
      $FUN(...);
      ...
      if (<... NULL != $RET ...>) ...
  - pattern-not-inside: |
      $FUN(...);
      ...
      if (<... !$RET ...>) ...
  - pattern-not-inside: |
      $FUN(...);
      ...
      if (<... $RET ...>) ...
  - pattern-not-inside: "<... $ALLOC == NULL ...>"
  - pattern-not-inside: "<... NULL == $ALLOC ...>"
  - pattern-not-inside: "<... $ALLOC != NULL ...>"
  - pattern-not-inside: "<... NULL != $ALLOC ...>"
  - pattern-not-inside: "<... !$ALLOC ...>"
- id: raptor-unchecked-ret-scanf-etc
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/252
    - https://codeql.github.com/codeql-query-help/cpp/cpp-missing-check-scanf/
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unchecked-ret-scanf-etc.yaml
  message: The software does not check the return value from a method or function,
    which can prevent it from detecting unexpected states and conditions.
  severity: WARNING
  languages:
  - c
  - cpp
  patterns:
  - pattern: "$FUN(...)"
  - metavariable-pattern:
      metavariable: "$FUN"
      pattern-either:
      - pattern: scanf
      - pattern: vscanf
      - pattern: fscanf
      - pattern: vfscanf
      - pattern: sscanf
      - pattern: vsscanf
      - pattern: wscanf
      - pattern: vwscanf
      - pattern: fwscanf
      - pattern: vfwscanf
      - pattern: swscanf
      - pattern: vswscanf
  - pattern-not-inside: "$RET = $FUN(...)"
  - pattern-not-inside: "<... $FUN(...) == $VAL ...>"
  - pattern-not-inside: "<... $VAL == $FUN(...) ...>"
  - pattern-not-inside: "<... $FUN(...) != $VAL ...>"
  - pattern-not-inside: "<... $VAL != $FUN(...) ...>"
  - pattern-not-inside: "<... $FUN(...) < $VAL ...>"
  - pattern-not-inside: "<... $VAL > $FUN(...) ...>"
  - pattern-not-inside: "<... $FUN(...) <= $VAL ...>"
  - pattern-not-inside: "<... $VAL >= $FUN(...) ...>"
  - pattern-not-inside: "<... $FUN(...) > $VAL ...>"
  - pattern-not-inside: "<... $VAL < $FUN(...) ...>"
  - pattern-not-inside: "<... $FUN(...) >= $VAL ...>"
  - pattern-not-inside: "<... $VAL <= $FUN(...) ...>"
  - pattern-not-inside: return $FUN(...);
- id: raptor-unchecked-ret-setuid-seteuid
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/252
    - https://lwn.net/Articles/451985/
    - https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf
    - https://www.openwall.com/lists/oss-security/2023/12/30/4
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unchecked-ret-setuid-seteuid.yaml
  message: The software does not check the return value from a method or function,
    which can prevent it from detecting unexpected states and conditions. If the program
    calls a function to drop privileges but  does not check the return code to ensure
    that privileges were  successfully dropped, then the program will continue to
    operate with  the higher privileges.
  severity: WARNING
  languages:
  - c
  - cpp
  patterns:
  - pattern: "$FUN(...)"
  - metavariable-pattern:
      metavariable: "$FUN"
      pattern-either:
      - pattern: setuid
      - pattern: seteuid
  - pattern-not-inside: "$RET = $FUN(...)"
  - pattern-not-inside: "<... $FUN(...) == $VAL ...>"
  - pattern-not-inside: "<... $VAL == $FUN(...) ...>"
  - pattern-not-inside: "<... $FUN(...) != $VAL ...>"
  - pattern-not-inside: "<... $VAL != $FUN(...) ...>"
  - pattern-not-inside: "<... $FUN(...) < $VAL ...>"
  - pattern-not-inside: "<... $VAL > $FUN(...) ...>"
  - pattern-not-inside: "<... !$FUN(...) ...>"
  - pattern-not-inside: return $FUN(...);
- id: raptor-unsafe-ret-snprintf-vsnprintf
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://lwn.net/Articles/507319/
    - https://g.co/kgs/PCHQjJ
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unsafe-ret-snprintf-vsnprintf.yaml
  message: The snprintf() and vsnprintf() functions return the total length of the
    string they tried to create. Therefore, this return value can be larger than the
    size of the destination buffer. If it is used unsafely, e.g. as an index to write
    to the destination buffer, memory corruption might occur.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "$RET = snprintf(...)"
  - pattern: "$RET = vsnprintf(...)"
  - pattern: "$RET += snprintf(...)"
  - pattern: "$RET += vsnprintf(...)"
- id: raptor-unsafe-ret-strlcpy-strlcat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://lwn.net/Articles/507319/
    - https://g.co/kgs/PCHQjJ
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unsafe-ret-strlcpy-strlcat.yaml
  message: The strlcpy() and strlcat() functions return the total length of the string
    they tried to create. For strlcpy() that means the length of the source string.
    For strlcat() that means the initial length of the destination string plus the
    length of of the source string. Therefore, this return value can be larger than
    the size of the destination buffer. If it is used unsafely, e.g. as an index to
    write to the destination buffer, memory corruption might occur.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "$RET = strlcpy(...)"
  - pattern: "$RET = strlcat(...)"
  - pattern: "$RET = wcslcpy(...)"
  - pattern: "$RET = wcslcat(...)"
  - pattern: "$RET += strlcpy(...)"
  - pattern: "$RET += strlcat(...)"
  - pattern: "$RET += wcslcpy(...)"
  - pattern: "$RET += wcslcat(...)"
- id: raptor-unsafe-strlen
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/190
    - https://cwe.mitre.org/data/definitions/680
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unsafe-strlen.yaml
  message: The software performs a calculation that can produce an integer overflow
    or wraparound, when the logic assumes that the resulting value will always be
    larger than the original value. This can introduce other weaknesses when the calculation
    is used for resource management or execution control. When influenced by the size
    of an  input it is often easier to overflow a short than an int.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(short $LEN) = strlen(...);"
  - pattern: "(short int $LEN) = strlen(...);"
  - pattern: "(unsigned short $LEN) = strlen(...);"
  - pattern: "(unsigned short int $LEN) = strlen(...);"
  - pattern: "(short $LEN) = wcslen(...);"
  - pattern: "(short int $LEN) = wcslen(...);"
  - pattern: "(unsigned short $LEN) = wcslen(...);"
  - pattern: "(unsigned short int $LEN) = wcslen(...);"
- id: raptor-unterminated-string-strncpy-stpncpy
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/170
    - https://cwe.mitre.org/data/definitions/126
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unterminated-string-strncpy-stpncpy.yaml
  message: If there is no NUL character byte in the first n bytes of the source string,
    strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program
    does not explicitly terminate the destination buffer, this will almost certainly
    result in information disclosure, and possibly a buffer overflow condition.
  severity: WARNING
  languages:
  - c
  - cpp
  patterns:
  - pattern: "$FUN(...)"
  - metavariable-pattern:
      metavariable: "$FUN"
      pattern-either:
      - pattern: strncpy
      - pattern: stpncpy
      - pattern: wcsncpy
      - pattern: wcpncpy
  - pattern-not-inside: |
      $FUN($DST, $SRC, $N);
      ...
      $DST[$POS] = NULL;
  - pattern-not-inside: |
      $FUN($DST, $SRC, $N);
      ...
      $DST[$POS] = '\0';
  - pattern-not-inside: |
      $FUN($DST, $SRC, $N);
      ...
      $DST[$POS] = 0;
- id: raptor-use-after-free
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/416
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/use-after-free.yaml
  message: The use of previously-freed memory can have any number of adverse consequences,
    ranging from the corruption of valid data to the execution of arbitrary code,
    depending on the instantiation and timing of the flaw. The simplest way data corruption
    may occur involves the system's reuse of the freed memory.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: "$PTR->$MEM"
    - pattern: "$PTR[$POS]"
    - pattern: "(*$PTR)"
    - pattern: return $PTR;
    - patterns:
      - pattern-either:
        - pattern: "$FUN(..., <... $PTR ...>, ...)"
        - pattern: "$FUN(..., <... $PTR->$MEM ...>, ...)"
        - pattern: "$FUN(..., <... $PTR[$POS] ...>, ...)"
        - pattern: "$FUN(..., <... (*$PTR) ...>, ...)"
        - pattern: "$PTR->$FUN(...)"
      - metavariable-pattern:
          metavariable: "$FUN"
          patterns:
          - pattern-not: free
  - pattern-inside: free($PTR); ...
  - pattern-not-inside: "free($PTR);\n...\n$PTR = $EXPR; \n...\n"
- id: raptor-write-into-stack-buffer
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/121
    - https://github.com/googleprojectzero/weggli
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/write-into-stack-buffer.yaml
  message: The software directly writes into a stack buffer. This might lead to a
    stack-based buffer overflow.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN($BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        $FUN($BUF, ...);
    - pattern-not: $FUN($BUF, "...", ...)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: strcpy
        - pattern: strncpy
        - pattern: stpcpy
        - pattern: stpncpy
        - pattern: strlcpy
        - pattern: strscpy
        - pattern: wcscpy
        - pattern: wcsncpy
        - pattern: wcpcpy
        - pattern: wcpncpy
        - pattern: wcslcpy
        - pattern: strcat
        - pattern: strncat
        - pattern: strlcat
        - pattern: wcscat
        - pattern: wcsncat
        - pattern: wcslcat
        - pattern: memcpy
        - pattern: memccpy
        - pattern: memmove
        - pattern: memset
        - pattern: wmemcpy
        - pattern: wmemmove
        - pattern: wmemset
  - patterns:
    - pattern: "$FUN($BUF, $FMT, ...)"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        $FUN($BUF, $FMT, ...);
    - metavariable-regex:
        metavariable: "$FMT"
        regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: sprintf
        - pattern: vsprintf
  - patterns:
    - pattern: "$FUN($BUF, $N, $FMT, ...)"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        $FUN($BUF, $N, $FMT, ...);
    - metavariable-regex:
        metavariable: "$FMT"
        regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: snprintf
        - pattern: vsnprintf
  - patterns:
    - pattern: "$FUN($BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        $FUN($BUF, ...);
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: gets
        - pattern: fgets
        - pattern: getwd
        - pattern: getcwd
        - pattern: fread
  - patterns:
    - pattern: "$FUN($ARG1, $BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        $FUN($ARG1, $BUF, ...);
    - pattern-not: $FUN("...", $BUF, ...)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: bcopy
  - patterns:
    - pattern: "$FUN($ARG1, $BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$LEN];
        ...
        $FUN($ARG1, $BUF, ...);
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: read
        - pattern: pread
        - pattern: recv
        - pattern: recvfrom
- id: trailofbits.generic.container-privileged.container-privileged
  message: Found container command (docker, podman) with extended privileges
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-250: Execution with Unnecessary Privileges'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://docs.docker.com/engine/reference/commandline/run/
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authorization
    source: https://semgrep.dev/r/trailofbits.generic.container-privileged.container-privileged
    shortlink: https://sg.run/qNLGR
    semgrep.dev:
      rule:
        r_id: 113212
        rv_id: 723874
        rule_id: ReUD0BO
        version_id: WrTNkvB
        url: https://semgrep.dev/playground/r/WrTNkvB/trailofbits.generic.container-privileged.container-privileged
        origin: community
  pattern-either:
  - pattern: docker ... --privileged
  - pattern: docker ... --cap-add=ALL
  - pattern: docker ... --cap-add=SYS_ADMIN
  - pattern: docker ... --cap-add=SYS_MODULE
  - pattern: docker ... --net=host
  - pattern: docker ... --userns=host
  - pattern: docker ... --pid=host
  - pattern: docker ... --ipc=host
  - pattern: docker ... --security-opt seccomp=unconfined
  - pattern: docker ... --security-opt apparmor=unconfined
  - pattern: podman ... --privileged
  - pattern: podman ... --cap-add=ALL
  - pattern: podman ... --cap-add=SYS_ADMIN
  - pattern: podman ... --cap-add=SYS_MODULE
  - pattern: podman ... --net=host
  - pattern: podman ... --userns=host
  - pattern: podman ... --pid=host
  - pattern: podman ... --ipc=host
  - pattern: podman ... --security-opt seccomp=unconfined
  - pattern: podman ... --security-opt apparmor=unconfined
- id: trailofbits.generic.container-user-root.container-user-root
  message: Found container command running as root
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-250: Execution with Unnecessary Privileges'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://docs.docker.com/engine/reference/commandline/run/
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authorization
    source: https://semgrep.dev/r/trailofbits.generic.container-user-root.container-user-root
    shortlink: https://sg.run/lBKyB
    semgrep.dev:
      rule:
        r_id: 113213
        rv_id: 253283
        rule_id: AbU9gy9
        version_id: d6TqRxp
        url: https://semgrep.dev/playground/r/d6TqRxp/trailofbits.generic.container-user-root.container-user-root
        origin: community
  pattern-either:
  - pattern: docker ... -u root
  - pattern: docker ... -u 0
  - pattern: docker ... --user root
  - pattern: docker ... --user 0
  - pattern: podman ... -u root
  - pattern: podman ... --u 0
  - pattern: podman ... --user root
  - pattern: podman ... --user 0
- id: trailofbits.generic.curl-insecure.curl-insecure
  message: Found `curl` command disabling SSL verification
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-295: Improper Certificate Validation'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://curl.se/docs/manpage.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.generic.curl-insecure.curl-insecure
    shortlink: https://sg.run/YG37D
    semgrep.dev:
      rule:
        r_id: 113214
        rv_id: 253284
        rule_id: BYUXkQx
        version_id: ZRT6EAy
        url: https://semgrep.dev/playground/r/ZRT6EAy/trailofbits.generic.curl-insecure.curl-insecure
        origin: community
  pattern-either:
  - pattern: 'curl ... -k '
  - pattern: curl ... --insecure
- id: trailofbits.generic.curl-unencrypted-url.curl-unencrypted-url
  message: Found `curl` command with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://curl.se/docs/manpage.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.generic.curl-unencrypted-url.curl-unencrypted-url
    shortlink: https://sg.run/6JldW
    semgrep.dev:
      rule:
        r_id: 113215
        rv_id: 723875
        rule_id: DbU6R39
        version_id: 0bTrQAn
        url: https://semgrep.dev/playground/r/0bTrQAn/trailofbits.generic.curl-unencrypted-url.curl-unencrypted-url
        origin: community
  patterns:
  - pattern-either:
    - pattern: curl ... http://
    - pattern: curl ... ftp://
  - pattern-not-inside: curl ... http://127.0.0.1
  - pattern-not-inside: curl ... http://localhost
- id: trailofbits.generic.gpg-insecure-flags.gpg-insecure-flags
  message: Found `gpg` command using insecure flags
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-295: Improper Certificate Validation'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://www.gnupg.org/gph/de/manual/r1023.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.generic.gpg-insecure-flags.gpg-insecure-flags
    shortlink: https://sg.run/oqLJx
    semgrep.dev:
      rule:
        r_id: 113216
        rv_id: 253286
        rule_id: WAUWqko
        version_id: ExTRkxb
        url: https://semgrep.dev/playground/r/ExTRkxb/trailofbits.generic.gpg-insecure-flags.gpg-insecure-flags
        origin: community
  pattern-either:
  - pattern: gpg ... --allow-non-selfsigned-uid
  - pattern: gpg ... --allow-freeform-uid
  - pattern: gpg ... --allow-old-cipher-algos
  - pattern: gpg ... --allow-weak-digest-algos
  - pattern: gpg ... --allow-weak-key-signatures
  - pattern: gpg ... --ignore-time-conflict
  - pattern: gpg ... --ignore-valid-from
  - pattern: gpg ... --ignore-crc-error
  - pattern: gpg ... --ignore-mdc-error
  - pattern: gpg ... --skip-verify
  - pattern: gpg ... --no-require-cross-certification
- id: trailofbits.generic.installer-allow-untrusted.installer-allow-untrusted
  message: Found `installer` command allowing untrusted installations
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-494: Download of Code Without Integrity Check'
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://ss64.com/mac/installer.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Cryptographic Issues
    source: https://semgrep.dev/r/trailofbits.generic.installer-allow-untrusted.installer-allow-untrusted
    shortlink: https://sg.run/zdLlk
    semgrep.dev:
      rule:
        r_id: 113217
        rv_id: 253287
        rule_id: 0oULKQE
        version_id: 7ZTD73J
        url: https://semgrep.dev/playground/r/7ZTD73J/trailofbits.generic.installer-allow-untrusted.installer-allow-untrusted
        origin: community
  pattern: installer ... -allowUntrusted
- id: trailofbits.generic.openssl-insecure-flags.openssl-insecure-flags
  message: Found `openssl` command using insecure flags
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-295: Improper Certificate Validation'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://www.openssl.org/docs/manmaster/man1/
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.generic.openssl-insecure-flags.openssl-insecure-flags
    shortlink: https://sg.run/pKL5k
    semgrep.dev:
      rule:
        r_id: 113218
        rv_id: 253288
        rule_id: KxUvKPY
        version_id: LjT7Ygd
        url: https://semgrep.dev/playground/r/LjT7Ygd/trailofbits.generic.openssl-insecure-flags.openssl-insecure-flags
        origin: community
  pattern-either:
  - pattern: 'openssl ... -pass pass:'
  - pattern: 'openssl ... -passin pass:'
  - pattern: 'openssl ... -passout pass:'
  - pattern: 'openssl ... -nodes '
  - pattern: 'openssl ... -noenc '
  - pattern: 'openssl ... -sha1 '
- id: trailofbits.generic.ssh-disable-host-key-checking.ssh-disable-host-key-checking
  message: Found `ssh` command disabling host key checking
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-295: Improper Certificate Validation'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://man7.org/linux/man-pages/man1/ssh.1.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.generic.ssh-disable-host-key-checking.ssh-disable-host-key-checking
    shortlink: https://sg.run/2ZWd8
    semgrep.dev:
      rule:
        r_id: 113219
        rv_id: 253289
        rule_id: qNU2R9X
        version_id: 8KT42rO
        url: https://semgrep.dev/playground/r/8KT42rO/trailofbits.generic.ssh-disable-host-key-checking.ssh-disable-host-key-checking
        origin: community
  pattern: ssh ... StrictHostKeyChecking=no
- id: trailofbits.generic.tar-insecure-flags.tar-insecure-flags
  message: Found `tar` command using insecure flags
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-73: External Control of File Name or Path'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://man7.org/linux/man-pages/man1/tar.1.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Path Traversal
    source: https://semgrep.dev/r/trailofbits.generic.tar-insecure-flags.tar-insecure-flags
    shortlink: https://sg.run/X5RyN
    semgrep.dev:
      rule:
        r_id: 113220
        rv_id: 258314
        rule_id: lBU4JeW
        version_id: 6xT5vWg
        url: https://semgrep.dev/playground/r/6xT5vWg/trailofbits.generic.tar-insecure-flags.tar-insecure-flags
        origin: community
  options:
    generic_ellipsis_max_span: 0
  pattern-either:
  - pattern: 'tar ... -P '
  - pattern: tar ... --absolute-paths
  - pattern: tar ... --absolute-names
  - pattern: 'tar ... --passphrase '
- id: trailofbits.generic.wget-no-check-certificate.wget-no-check-certificate
  message: Found `wget` command disabling SSL verification
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-295: Improper Certificate Validation'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://linux.die.net/man/1/wget
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.generic.wget-no-check-certificate.wget-no-check-certificate
    shortlink: https://sg.run/j2WyD
    semgrep.dev:
      rule:
        r_id: 113221
        rv_id: 253291
        rule_id: PeUJREx
        version_id: QkT8yqY
        url: https://semgrep.dev/playground/r/QkT8yqY/trailofbits.generic.wget-no-check-certificate.wget-no-check-certificate
        origin: community
  pattern-either:
  - pattern: wget ... --no-check-certificate
  - pattern: wget ... --no-hsts
- id: trailofbits.generic.wget-unencrypted-url.wget-unencrypted-url
  message: Found `wget` command  with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - generic
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - shell
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://linux.die.net/man/1/wget
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.generic.wget-unencrypted-url.wget-unencrypted-url
    shortlink: https://sg.run/10Ddk
    semgrep.dev:
      rule:
        r_id: 113222
        rv_id: 253292
        rule_id: JDUNz2o
        version_id: 3ZTlJXZ
        url: https://semgrep.dev/playground/r/3ZTlJXZ/trailofbits.generic.wget-unencrypted-url.wget-unencrypted-url
        origin: community
  pattern-either:
  - pattern: wget ... http://
  - pattern: wget ... ftp://
- id: trailofbits.go.eth-rpc-tracetransaction.eth-rpc-tracetransaction
  message: 'Using built-in transaction tracers can be dangerous if measures are not
    taken to filter out reverted call frames.  Review the related code to ensure the
    following properties:  1. Reverted call frames and their associated subtraces
    are filtered out from any analysis.   2. The transaction being traced is from
    a finalized block.'
  severity: WARNING
  languages:
  - go
  metadata:
    category: security
    technology:
    - ethereum
    - blockchain
    - geth
    subcategory:
    - audit
    cwe: 'CWE-1284: Improper Validation of Specified Quantity in Input'
    confidence: LOW
    impact: HIGH
    likelihood: MEDIUM
    description: Detects attempts to extract trace information from an EVM transaction
      or block. In exchange or bridge applications, extra logic must be implemented
      encapsulating these endpoints to prevent the values transferred during reverted
      call frames from being counted.
    references:
    - https://blog.trailofbits.com/2023/08/23/the-engineers-guide-to-blockchain-finality/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.eth-rpc-tracetransaction.eth-rpc-tracetransaction
    shortlink: https://sg.run/r6XzP
    semgrep.dev:
      rule:
        r_id: 137469
        rv_id: 763094
        rule_id: WAUWXz3
        version_id: gETJ4g6
        url: https://semgrep.dev/playground/r/gETJ4g6/trailofbits.go.eth-rpc-tracetransaction.eth-rpc-tracetransaction
        origin: community
  pattern-either:
  - pattern: "$RECEIVER.TraceTransaction($CTX, $FILTER, $TRACECONF)"
  - pattern: "$RECEIVER.TraceBlockByNumber($CTX, $FILTER, $TRACECONF)"
  - pattern: "$RECEIVER.TraceBlockByHash($CTX, $FILTER, $TRACECONF)"
  - pattern: "$RECEIVER.TraceBlock($CTX, $FILTER, $TRACECONF)"
  - pattern: "$RECEIVER.TraceChain($CTX, ...)"
  - pattern-regex: ".*debug_traceBlock.*"
  - pattern-regex: ".*debug_traceTransaction.*"
  - pattern-regex: ".*debug_traceCall.*"
  - pattern-regex: ".*debug_traceBlockByNumber.*"
  - pattern-regex: ".*debug_traceBlockByHash.*"
  - pattern-regex: ".*trace_block.*"
  - pattern-regex: ".*trace_transaction.*"
  - pattern-regex: ".*trace_replayBlockTransactions.*"
  - pattern-regex: ".*trace_replayTransaction.*"
  - pattern-regex: ".*trace_filter.*"
  - pattern-regex: ".*trace_call.*"
  - pattern-regex: ".*trace_callMany.*"
  - pattern-regex: ".*trace_get.*"
- id: trailofbits.go.eth-txreceipt-status.eth-txreceipt-status
  message: 'A transaction receipt''s status is inspected using `$RECEIVER.Status()`.
    For bridges and exchanges, this is a high-risk pattern because even though the
    transaction was successful, calls within the transaction may have failed. Review
    the related code to ensure the following properties:  1. The receipt''s success
    is not being used as a verification measure. 2. The transaction being inspected
    is from a finalized block.'
  severity: WARNING
  languages:
  - go
  metadata:
    category: security
    confidence: LOW
    impact: HIGH
    likelihood: MEDIUM
    technology:
    - ethereum
    - blockchain
    - geth
    subcategory:
    - audit
    cwe: 'CWE-437: Incomplete Model of Endpoint Features'
    description: Detects when a transaction receipt's status is read
    references:
    - https://blog.trailofbits.com/2023/08/23/the-engineers-guide-to-blockchain-finality/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.eth-txreceipt-status.eth-txreceipt-status
    shortlink: https://sg.run/bwGlP
    semgrep.dev:
      rule:
        r_id: 137470
        rv_id: 763095
        rule_id: 0oUL8xK
        version_id: QkTnyd7
        url: https://semgrep.dev/playground/r/QkTnyd7/trailofbits.go.eth-txreceipt-status.eth-txreceipt-status
        origin: community
  patterns:
  - pattern-inside: |
      import "github.com/ethereum/go-ethereum/core/types"
      ...
  - pattern: "($RECEIVER : Receipt).Status\n"
- id: trailofbits.go.invalid-usage-of-modified-variable.invalid-usage-of-modified-variable
  message: Variable `$X` is likely modified and later used on error. In some cases
    this could result  in panics due to a nil dereference
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-665: Improper Initialization'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Possible unintentional assignment when an error occurs
    references:
    - https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.invalid-usage-of-modified-variable.invalid-usage-of-modified-variable
    shortlink: https://sg.run/WWQ2
    semgrep.dev:
      rule:
        r_id: 17197
        rv_id: 258507
        rule_id: kxU6Xb
        version_id: A8Tr9vQ
        url: https://semgrep.dev/playground/r/A8Tr9vQ/trailofbits.go.invalid-usage-of-modified-variable.invalid-usage-of-modified-variable
        origin: community
  patterns:
  - pattern: |
      ..., $X, ..., $ERR = ...
      if $ERR != nil {
        ...
        <... $X.$Y ...>
      }
  - pattern-not: |
      ..., $X, ..., $ERR = ...
      if $ERR != nil {
        ...
        $X, ... = ...
        ...
        <... $X.$Y ...>
      }
  - pattern-not: |
      ..., $X, ..., $ERR = ...
      if $ERR != nil {
        ...
        $X = ...
        ...
        <... $X.$Y ...>
      }
  - pattern-not: |
      ..., $X, ..., $ERR = ...
      if $ERR != nil {
        ...
        if $X != nil {
          <... $X.$Y ...>
        }
        ...
      }
  - pattern-not: |
      ..., $X, ..., $ERR := ...
      if $ERR != nil {
        ...
        if  $X != nil && <... $X.$Y ...> {
          ...
        }
        ...
      }
- id: trailofbits.go.iterate-over-empty-map.iterate-over-empty-map
  message: Iteration over a possibly empty map `$C`. This is likely a bug or redundant
    code
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-665: Improper Initialization'
    subcategory:
    - audit
    confidence: MEDIUM
    likelihood: LOW
    impact: LOW
    technology:
    - "--no-technology--"
    description: Probably redundant iteration over an empty map
    references:
    - https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.iterate-over-empty-map.iterate-over-empty-map
    shortlink: https://sg.run/08jj
    semgrep.dev:
      rule:
        r_id: 17198
        rv_id: 759634
        rule_id: wdUlww
        version_id: 6xTELRW
        url: https://semgrep.dev/playground/r/6xTELRW/trailofbits.go.iterate-over-empty-map.iterate-over-empty-map
        origin: community
  patterns:
  - pattern: |
      $C = make(map[$T1] $T2, ...)
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X] = $V
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X]++
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X]--
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $CODEC.Unmarshal($BYTES, &$C)
      ...
      for $K := range $C { ... }
- id: trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast
  message: Downcasting or changing sign of an integer with `$CAST_METHOD` method
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-681: Incorrect Conversion between Numeric Types'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: LOW
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Integer underflows
    references:
    - https://github.com/golang/go/issues/30209
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast
    shortlink: https://sg.run/65WB
    semgrep.dev:
      rule:
        r_id: 11759
        rv_id: 95088
        rule_id: 4bU2AZ
        version_id: RGTDPPg
        url: https://semgrep.dev/playground/r/RGTDPPg/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast
        origin: community
  pattern-either:
  - patterns:
    - metavariable-pattern:
        metavariable: "$CAST_METHOD"
        pattern-either:
        - pattern: uint8
        - pattern: uint16
        - pattern: uint32
        - pattern: int8
        - pattern: int16
        - pattern: int32
    - pattern-either:
      - pattern: |
          $X, ... = strconv.Atoi(...)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseInt(..., ..., 64)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseUint(..., ..., 64)
          ...
          $CAST_METHOD($X)
  - pattern: |
      $X, ... = strconv.Atoi(...)
      ...
      uint64($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 64)
      ...
      uint64($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 64)
      ...
      int64($X)
  - patterns:
    - metavariable-pattern:
        metavariable: "$CAST_METHOD"
        pattern-either:
        - pattern: uint8
        - pattern: uint16
        - pattern: int8
        - pattern: int16
    - pattern-either:
      - pattern: |
          $X, ... = strconv.ParseInt(..., ..., 32)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseUint(..., ..., 32)
          ...
          $CAST_METHOD($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 32)
      ...
      uint32($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 32)
      ...
      int32($X)
  - patterns:
    - metavariable-pattern:
        metavariable: "$CAST_METHOD"
        pattern-either:
        - pattern: uint8
        - pattern: int8
    - pattern-either:
      - pattern: |
          $X, ... = strconv.ParseInt(..., ..., 16)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseUint(..., ..., 16)
          ...
          $CAST_METHOD($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 16)
      ...
      uint16($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 16)
      ...
      int16($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 8)
      ...
      uint8($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 8)
      ...
      int8($X)
- id: trailofbits.javascript.apollo-graphql.v3-cors-audit.v3-potentially-bad-cors
  languages:
  - js
  - ts
  message: The Apollo GraphQL server is setup with a CORS policy that does not deny
    all origins. Carefully review the origins to see if any of them are incorrectly
    setup (third-party websites, bad regexes, functions that reflect every origin,
    etc.).
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    subcategory:
    - audit
    confidence: LOW
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - graphql
    - apollo-graphql-server
    - apollo-graphql-server-v3
    description: Potentially bad CORS policy
    references:
    - https://www.apollographql.com/docs/apollo-server/v3/security/cors#configuring-cors-options-for-apollo-server
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Validation
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.v3-cors-audit.v3-potentially-bad-cors
    shortlink: https://sg.run/ORxR
    semgrep.dev:
      rule:
        r_id: 60575
        rv_id: 95095
        rule_id: v8UlNl
        version_id: qkT2oo4
        url: https://semgrep.dev/playground/r/qkT2oo4/trailofbits.javascript.apollo-graphql.v3-cors-audit.v3-potentially-bad-cors
        origin: community
  mode: taint
  pattern-sources:
  - pattern: "{ origin: function(...) {...} }\n"
  - patterns:
    - pattern-inside: "{ origin: $NOT_KNOWN_GOOD_CORS_ORIGIN }\n"
    - metavariable-pattern:
        metavariable: "$NOT_KNOWN_GOOD_CORS_ORIGIN"
        patterns:
        - pattern-not: 'false

            '
        - pattern-not: "[]\n"
  pattern-sinks:
  - patterns:
    - pattern: "{..., cors: $CORS_ORIGIN, ...}\n"
    - focus-metavariable: "$CORS_ORIGIN"
- id: trailofbits.jvm.mongo-hostname-verification-disabled.mongo-hostname-verification-disabled
  message: Found MongoDB client with SSL hostname verification disabled
  languages:
  - java
  - kotlin
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    technology:
    - java
    - kotlin
    - mongodb
    cwe: 'CWE-295: Improper Certificate Validation'
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/connection/tls/#disable-hostname-verification
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.jvm.mongo-hostname-verification-disabled.mongo-hostname-verification-disabled
    shortlink: https://sg.run/yyLqk
    semgrep.dev:
      rule:
        r_id: 113224
        rv_id: 253295
        rule_id: GdUvk46
        version_id: JdT5gxX
        url: https://semgrep.dev/playground/r/JdT5gxX/trailofbits.jvm.mongo-hostname-verification-disabled.mongo-hostname-verification-disabled
        origin: community
  pattern: "$SETTINGS.invalidHostNameAllowed(true)"
- id: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning
  message: If possible, it is better to rely on automatic pinning in PyTorch to avoid
    undefined behavior and for efficiency
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: LOW
    impact: LOW
    technology:
    - pytorch
    description: "`PyTorch` memory not automatically pinned"
    references:
    - https://pytorch.org/docs/stable/data.html#memory-pinning
    license: AGPL-3.0 license
    vulnerability_class:
    - Dangerous Method or Function
    source: https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning
    shortlink: https://sg.run/jz5N
    semgrep.dev:
      rule:
        r_id: 17165
        rv_id: 250821
        rule_id: WAUN1Z
        version_id: 8KT4boW
        url: https://semgrep.dev/playground/r/8KT4boW/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning
        origin: community
  pattern-either:
  - patterns:
    - pattern: torch.utils.data.DataLoader(...)
    - pattern-not: torch.utils.data.DataLoader(..., pin_memory=$VALUE, ...)
  - pattern: torch.utils.data.DataLoader(..., pin_memory=False, ...)
- id: trailofbits.python.numpy-distutils.numpy-distutils
  message: NumPy distutils is deprecated, and will be removed in the future
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: MEDIUM
    impact: LOW
    technology:
    - numpy
    description: Use of deprecated `numpy.distutils`
    references:
    - https://numpy.org/doc/stable/reference/distutils.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Dangerous Method or Function
    source: https://semgrep.dev/r/trailofbits.python.numpy-distutils.numpy-distutils
    shortlink: https://sg.run/rqGP
    semgrep.dev:
      rule:
        r_id: 43925
        rv_id: 95104
        rule_id: GdUgN8
        version_id: jQTgqq9
        url: https://semgrep.dev/playground/r/jQTgqq9/trailofbits.python.numpy-distutils.numpy-distutils
        origin: community
  patterns:
  - pattern: 'import numpy.distutils

      '
- id: trailofbits.python.numpy-f2py-compile.numpy-f2py-compile
  message: Compiling arbitrary code can result in code execution. Ensure the source
    code is from a trusted location
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - numpy
    description: Potential arbitrary code execution from `NumPy` `f2py` compilation
    references:
    - https://numpy.org/doc/stable/f2py/usage.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Dangerous Method or Function
    source: https://semgrep.dev/r/trailofbits.python.numpy-f2py-compile.numpy-f2py-compile
    shortlink: https://sg.run/bEdP
    semgrep.dev:
      rule:
        r_id: 43926
        rv_id: 95105
        rule_id: ReUdJ0
        version_id: 1QTOZZ0
        url: https://semgrep.dev/playground/r/1QTOZZ0/trailofbits.python.numpy-f2py-compile.numpy-f2py-compile
        origin: community
  patterns:
  - pattern: numpy.f2py.compile(...)
  - pattern-not: numpy.f2py.compile("...", ...)
- id: trailofbits.python.numpy-in-pytorch-datasets.numpy-in-pytorch-datasets
  message: Using the NumPy RNG inside of a PyTorch dataset can lead to a number of
    issues with loading data, including identical augmentations. Instead, use the
    random number generators built into Python and PyTorch
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-330: Use of Insufficiently Random Values'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: MEDIUM
    impact: LOW
    technology:
    - pytorch
    - numpy
    description: Calls to the `NumPy` RNG inside of a `Torch` dataset
    references:
    - https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects
    license: AGPL-3.0 license
    vulnerability_class:
    - Cryptographic Issues
    source: https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-datasets.numpy-in-pytorch-datasets
    shortlink: https://sg.run/dnR6
    semgrep.dev:
      rule:
        r_id: 44134
        rv_id: 250822
        rule_id: KxURLn
        version_id: gET6q8p
        url: https://semgrep.dev/playground/r/gET6q8p/trailofbits.python.numpy-in-pytorch-datasets.numpy-in-pytorch-datasets
        origin: community
  patterns:
  - pattern: |
      class $X(torch.utils.data.Dataset):
        ...
        def __getitem__(...):
          ...
          numpy.random.randint(...)
          ...
- id: trailofbits.python.numpy-load-library.numpy-load-library
  message: Loading custom operator libraries can result in arbitrary code execution
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - numpy
    description: Potential arbitrary code execution from `NumPy` library loading
    references:
    - https://numpy.org/doc/stable/reference/routines.ctypeslib.html#numpy.ctypeslib.load_library
    license: AGPL-3.0 license
    vulnerability_class:
    - Dangerous Method or Function
    source: https://semgrep.dev/r/trailofbits.python.numpy-load-library.numpy-load-library
    shortlink: https://sg.run/NXkL
    semgrep.dev:
      rule:
        r_id: 43927
        rv_id: 95108
        rule_id: AbUxDq
        version_id: rxTykkg
        url: https://semgrep.dev/playground/r/rxTykkg/trailofbits.python.numpy-load-library.numpy-load-library
        origin: community
  patterns:
  - pattern: numpy.ctypeslib.load_library(...)
  - pattern-not: numpy.ctypeslib.load_library("...", "...")
- id: trailofbits.python.onnx-session-options.onnx-session-options
  message: Loading custom operator libraries can result in arbitrary code execution
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - onnx
    description: Potential arbitrary code execution from `ONNX` library loading
    references:
    - https://onnxruntime.ai/docs/reference/operators/add-custom-op.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Dangerous Method or Function
    source: https://semgrep.dev/r/trailofbits.python.onnx-session-options.onnx-session-options
    shortlink: https://sg.run/kRd1
    semgrep.dev:
      rule:
        r_id: 43928
        rv_id: 95109
        rule_id: BYUoqy
        version_id: bZTbOOD
        url: https://semgrep.dev/playground/r/bZTbOOD/trailofbits.python.onnx-session-options.onnx-session-options
        origin: community
  patterns:
  - pattern-inside: |
      $SESSION = onnxruntime.SessionOptions(...)
      ...
  - pattern: "$SESSION.register_custom_ops_library(...)"
  - pattern-not: $SESSION.register_custom_ops_library("...")
- id: trailofbits.python.pandas-eval.pandas-eval
  message: Pandas eval() and query() may be dangerous if used to evaluate dynamic
    content. If this content can be input from outside the program, this may be a
    code injection vulnerability. Ensure evaluated content is not definable by external
    sources.
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    subcategory:
    - audit
    confidence: LOW
    likelihood: LOW
    impact: HIGH
    technology:
    - pandas
    description: Potential arbitrary code execution from `pandas` functions that evaluate
      user-provided expressions
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - Code Injection
    source: https://semgrep.dev/r/trailofbits.python.pandas-eval.pandas-eval
    shortlink: https://sg.run/bwJed
    semgrep.dev:
      rule:
        r_id: 124726
        rv_id: 733075
        rule_id: ReUDw9J
        version_id: 2KTLoZO
        url: https://semgrep.dev/playground/r/2KTLoZO/trailofbits.python.pandas-eval.pandas-eval
        origin: community
  patterns:
  - pattern-inside: |
      import pandas
      ...
  - pattern-either:
    - patterns:
      - pattern: pandas.DataFrame.$FN(...)
      - pattern-not: pandas.DataFrame.$FN("...", ...)
      - pattern-not: pandas.DataFrame.$FN(f"", ...)
    - patterns:
      - pattern: pandas.$FN(...)
      - pattern-not: pandas.$FN("...", ...)
      - pattern-not: pandas.$FN(f"", ...)
    - patterns:
      - pattern-inside: |
          $DF = pandas.DataFrame(...)
          ...
      - pattern: "$DF.$FN(...)"
      - pattern-not: $DF.$FN("...", ...)
      - pattern-not: $DF.$FN(f"", ...)
  - metavariable-regex:
      metavariable: "$FN"
      regex: "(eval|query)"
- id: trailofbits.python.pytorch-classes-load-library.pytorch-classes-load-library
  message: Loading custom operator libraries can result in arbitrary code execution
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - pytorch
    description: Potential arbitrary code execution from `PyTorch` library loading
    references:
    - https://pytorch.org/tutorials/advanced/torch_script_custom_classes.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Dangerous Method or Function
    source: https://semgrep.dev/r/trailofbits.python.pytorch-classes-load-library.pytorch-classes-load-library
    shortlink: https://sg.run/nD6d
    semgrep.dev:
      rule:
        r_id: 44136
        rv_id: 95114
        rule_id: lBUYD9
        version_id: O9TNGGw
        url: https://semgrep.dev/playground/r/O9TNGGw/trailofbits.python.pytorch-classes-load-library.pytorch-classes-load-library
        origin: community
  patterns:
  - pattern: torch.classes.load_library(...)
  - pattern-not: torch.classes.load_library("...")
- id: trailofbits.python.pytorch-package.pytorch-package
  message: Avoid importing torch.package - it can result in arbitrary code execution
    via pickle
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - audit
    confidence: LOW
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - pytorch
    description: Potential arbitrary code execution from `torch.package`
    references:
    - https://pytorch.org/docs/1.13/package.html#torch-package
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pytorch-package.pytorch-package
    shortlink: https://sg.run/EK35
    semgrep.dev:
      rule:
        r_id: 44137
        rv_id: 95115
        rule_id: PeUKGk
        version_id: e1T0vvB
        url: https://semgrep.dev/playground/r/e1T0vvB/trailofbits.python.pytorch-package.pytorch-package
        origin: community
  pattern: import torch.package
- id: trailofbits.python.tensorflow-load-library.tensorflow-load-library
  message: Loading custom operator libraries can result in arbitrary code execution
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - tensorflow
    description: Potential arbitrary code execution from `TensorFlow` library loading
    references:
    - https://www.tensorflow.org/api_docs/python/tf/load_library
    - https://www.tensorflow.org/api_docs/python/tf/load_op_library
    license: AGPL-3.0 license
    vulnerability_class:
    - Dangerous Method or Function
    source: https://semgrep.dev/r/trailofbits.python.tensorflow-load-library.tensorflow-load-library
    shortlink: https://sg.run/xp0j
    semgrep.dev:
      rule:
        r_id: 43930
        rv_id: 95119
        rule_id: WAUgBJ
        version_id: nWTxYYN
        url: https://semgrep.dev/playground/r/nWTxYYN/trailofbits.python.tensorflow-load-library.tensorflow-load-library
        origin: community
  patterns:
  - pattern-either:
    - pattern: tensorflow.load_library(...)
    - pattern: tensorflow.load_op_library(...)
  - pattern-not: tensorflow.load_library("...")
  - pattern-not: tensorflow.load_op_library("...")
- id: trailofbits.rs.panic-in-function-returning-result.panic-in-function-returning-result
  message: "`expect` or `unwrap` called in function returning a `Result`"
  languages:
  - rust
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-755: Improper Handling of Exceptional Conditions'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: MEDIUM
    impact: LOW
    technology:
    - "--no-technology--"
    description: Calling `unwrap` or `expect` in a function returning a `Result`
    references:
    - https://doc.rust-lang.org/std/result/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.rs.panic-in-function-returning-result.panic-in-function-returning-result
    shortlink: https://sg.run/WpeL
    semgrep.dev:
      rule:
        r_id: 13697
        rv_id: 95121
        rule_id: 2ZUPQ3
        version_id: 7ZTgeey
        url: https://semgrep.dev/playground/r/7ZTgeey/trailofbits.rs.panic-in-function-returning-result.panic-in-function-returning-result
        origin: community
  patterns:
  - pattern-either:
    - pattern: "$EXPR.unwrap()"
    - pattern: "$EXPR.expect(...)"
  - pattern-either:
    - pattern-inside: |
        fn $FUNC(...) -> Result<$T1, $T2> {
            ...
        }
    - pattern-inside: |
        fn $FUNC(...) -> Result<$T> {
            ...
        }
    - patterns:
      - pattern-inside: |
          fn $FUNC(...) -> $RETTYPE {
              ...
          }
      - pattern-either:
        - pattern-inside: |
            type $RETTYPE = Result<$T>;
            ...
            fn $FUNC(...) -> $RETTYPE {
                ...
            }
        - pattern-inside: |
            type $RETTYPE = Result<$T1, $T2>;
            ...
            fn $FUNC(...) -> $RETTYPE {
                ...
            }
- id: trailofbits.yaml.ansible.apt-key-unencrypted-url.apt-key-unencrypted-url
  message: Found apt key download with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    - apt
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_key_module.html#parameter-url
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.apt-key-unencrypted-url.apt-key-unencrypted-url
    shortlink: https://sg.run/r68RP
    semgrep.dev:
      rule:
        r_id: 113225
        rv_id: 253296
        rule_id: ReUD0BR
        version_id: 5PTk51b
        url: https://semgrep.dev/playground/r/5PTk51b/trailofbits.yaml.ansible.apt-key-unencrypted-url.apt-key-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $APTKEY:
        ...
  - metavariable-pattern:
      metavariable: "$APTKEY"
      pattern-either:
      - pattern: apt_key
      - pattern: ansible.builtin.apt_key
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: url
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.apt-key-validate-certs-disabled.apt-key-validate-certs-disabled
  message: Found apt key with SSL verification disabled
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
    subcategory:
    - audit
    technology:
    - ansible
    - apt
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_key_module.html#parameter-validate_certs
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.apt-key-validate-certs-disabled.apt-key-validate-certs-disabled
    shortlink: https://sg.run/bwPnP
    semgrep.dev:
      rule:
        r_id: 113226
        rv_id: 253297
        rule_id: AbU9gyg
        version_id: GxTjwed
        url: https://semgrep.dev/playground/r/GxTjwed/trailofbits.yaml.ansible.apt-key-validate-certs-disabled.apt-key-validate-certs-disabled
        origin: community
  patterns:
  - pattern-inside: |
      $APTKEY:
        ...
        url: ...
        ...
  - metavariable-pattern:
      metavariable: "$APTKEY"
      pattern-either:
      - pattern: apt_key
      - pattern: ansible.builtin.apt_key
  - pattern: "$KEY: $VALUE"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: validate_certs
  - metavariable-pattern:
      metavariable: "$VALUE"
      pattern-either:
      - pattern: 'false'
- id: trailofbits.yaml.ansible.apt-unencrypted-url.apt-unencrypted-url
  message: Found apt deb with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    - apt
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html#parameter-deb
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.apt-unencrypted-url.apt-unencrypted-url
    shortlink: https://sg.run/NbW3L
    semgrep.dev:
      rule:
        r_id: 113227
        rv_id: 253298
        rule_id: BYUXkQb
        version_id: RGTevLG
        url: https://semgrep.dev/playground/r/RGTevLG/trailofbits.yaml.ansible.apt-unencrypted-url.apt-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $APT:
        ...
  - metavariable-pattern:
      metavariable: "$APT"
      pattern-either:
      - pattern: apt
      - pattern: ansible.builtin.apt
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: deb
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.dnf-unencrypted-url.dnf-unencrypted-url
  message: Found dnf download with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    - dnf
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf_module.html#parameter-name
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf5_module.html#parameter-name
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.dnf-unencrypted-url.dnf-unencrypted-url
    shortlink: https://sg.run/kx0y1
    semgrep.dev:
      rule:
        r_id: 113228
        rv_id: 253299
        rule_id: DbU6R3w
        version_id: A8TkYdl
        url: https://semgrep.dev/playground/r/A8TkYdl/trailofbits.yaml.ansible.dnf-unencrypted-url.dnf-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $DNF:
        ...
  - metavariable-pattern:
      metavariable: "$DNF"
      pattern-either:
      - pattern: dnf
      - pattern: ansible.builtin.dnf
      - pattern: dnf5
      - pattern: ansible.builtin.dnf5
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: name
      - pattern: pkg
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.dnf-validate-certs-disabled.dnf-validate-certs-disabled
  message: Found dnf with SSL verification disabled
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
    subcategory:
    - audit
    technology:
    - ansible
    - dnf
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf_module.html#parameter-validate_certs
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf5_module.html#parameter-validate_certs
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.dnf-validate-certs-disabled.dnf-validate-certs-disabled
    shortlink: https://sg.run/wdL06
    semgrep.dev:
      rule:
        r_id: 113229
        rv_id: 253300
        rule_id: WAUWqkG
        version_id: BjTxYZZ
        url: https://semgrep.dev/playground/r/BjTxYZZ/trailofbits.yaml.ansible.dnf-validate-certs-disabled.dnf-validate-certs-disabled
        origin: community
  patterns:
  - pattern-inside: |
      $DNF:
        ...
  - metavariable-pattern:
      metavariable: "$DNF"
      pattern-either:
      - pattern: dnf
      - pattern: ansible.builtin.dnf
      - pattern: dnf5
      - pattern: ansible.builtin.dnf5
  - pattern: "$KEY: $VALUE"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: validate_certs
  - metavariable-pattern:
      metavariable: "$VALUE"
      pattern-either:
      - pattern: 'false'
- id: trailofbits.yaml.ansible.get-url-unencrypted-url.get-url-unencrypted-url
  message: Found file download with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html#parameter-url
    - https://docs.ansible.com/ansible/latest/collections/ansible/windows/win_get_url_module.html#parameter-url
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.get-url-unencrypted-url.get-url-unencrypted-url
    shortlink: https://sg.run/x8LKj
    semgrep.dev:
      rule:
        r_id: 113230
        rv_id: 253301
        rule_id: 0oULKQq
        version_id: DkTq8bj
        url: https://semgrep.dev/playground/r/DkTq8bj/trailofbits.yaml.ansible.get-url-unencrypted-url.get-url-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $GETURL:
        ...
  - pattern-not-inside: |
      $GETURL:
        ...
        checksum: ...
        ...
  - metavariable-pattern:
      metavariable: "$GETURL"
      pattern-either:
      - pattern: get_url
      - pattern: win_get_url
      - pattern: ansible.builtin.get_url
      - pattern: ansible.windows.win_get_url
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: url
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.get-url-validate-certs-disabled.get-url-validate-certs-disabled
  message: Found file download with SSL verification disabled
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
    subcategory:
    - audit
    technology:
    - ansible
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html#parameter-validate_certs
    - https://docs.ansible.com/ansible/latest/collections/ansible/windows/win_get_url_module.html#parameter-validate_certs
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.get-url-validate-certs-disabled.get-url-validate-certs-disabled
    shortlink: https://sg.run/Or0N7
    semgrep.dev:
      rule:
        r_id: 113231
        rv_id: 253302
        rule_id: KxUvKPQ
        version_id: WrTOxK1
        url: https://semgrep.dev/playground/r/WrTOxK1/trailofbits.yaml.ansible.get-url-validate-certs-disabled.get-url-validate-certs-disabled
        origin: community
  patterns:
  - pattern-inside: |
      $GETURL:
        ...
        url: ...
        ...
  - pattern-not-inside: |
      $GETURL:
        ...
        checksum: ...
        ...
  - metavariable-pattern:
      metavariable: "$GETURL"
      pattern-either:
      - pattern: get_url
      - pattern: win_get_url
      - pattern: ansible.builtin.get_url
      - pattern: ansible.windows.win_get_url
  - pattern: "$KEY: $VALUE"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: validate_certs
  - metavariable-pattern:
      metavariable: "$VALUE"
      pattern-either:
      - pattern: 'false'
- id: trailofbits.yaml.ansible.rpm-key-unencrypted-url.rpm-key-unencrypted-url
  message: Found RPM key download with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    - rpm
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/rpm_key_module.html#parameter-key
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.rpm-key-unencrypted-url.rpm-key-unencrypted-url
    shortlink: https://sg.run/eqGkR
    semgrep.dev:
      rule:
        r_id: 113232
        rv_id: 253303
        rule_id: qNU2R9K
        version_id: 0bTyOzA
        url: https://semgrep.dev/playground/r/0bTyOzA/trailofbits.yaml.ansible.rpm-key-unencrypted-url.rpm-key-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $RPMKEY:
        ...
  - metavariable-pattern:
      metavariable: "$RPMKEY"
      pattern-either:
      - pattern: rpm_key
      - pattern: ansible.builtin.rpm_key
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: key
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.rpm-key-validate-certs-disabled.rpm-key-validate-certs-disabled
  message: Found RPM key with SSL verification disabled
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
    subcategory:
    - audit
    technology:
    - ansible
    - rpm
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/rpm_key_module.html#parameter-validate_certs
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.rpm-key-validate-certs-disabled.rpm-key-validate-certs-disabled
    shortlink: https://sg.run/v8LWW
    semgrep.dev:
      rule:
        r_id: 113233
        rv_id: 253304
        rule_id: lBU4Jee
        version_id: K3Tnykp
        url: https://semgrep.dev/playground/r/K3Tnykp/trailofbits.yaml.ansible.rpm-key-validate-certs-disabled.rpm-key-validate-certs-disabled
        origin: community
  patterns:
  - pattern-inside: |
      $RPMKEY:
        ...
        key: ...
        ...
  - metavariable-pattern:
      metavariable: "$RPMKEY"
      pattern-either:
      - pattern: rpm_key
      - pattern: ansible.builtin.rpm_key
  - pattern: "$KEY: $VALUE"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: validate_certs
  - metavariable-pattern:
      metavariable: "$VALUE"
      pattern-either:
      - pattern: 'false'
- id: trailofbits.yaml.ansible.unarchive-unencrypted-url.unarchive-unencrypted-url
  message: Found unarchive download with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html#parameter-src
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.unarchive-unencrypted-url.unarchive-unencrypted-url
    shortlink: https://sg.run/d85yn
    semgrep.dev:
      rule:
        r_id: 113234
        rv_id: 253305
        rule_id: YGUpZzx
        version_id: qkT5q7N
        url: https://semgrep.dev/playground/r/qkT5q7N/trailofbits.yaml.ansible.unarchive-unencrypted-url.unarchive-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $UNARCHIVE:
        ...
  - metavariable-pattern:
      metavariable: "$UNARCHIVE"
      pattern-either:
      - pattern: unarchive
      - pattern: ansible.builtin.unarchive
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: src
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.unarchive-validate-certs-disabled.unarchive-validate-certs-disabled
  message: Found unarchive download with SSL verification disabled
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
    subcategory:
    - audit
    technology:
    - ansible
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html#parameter-validate_certs
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.unarchive-validate-certs-disabled.unarchive-validate-certs-disabled
    shortlink: https://sg.run/ZqByA
    semgrep.dev:
      rule:
        r_id: 113235
        rv_id: 253306
        rule_id: 6JUv2A4
        version_id: l4TlPRP
        url: https://semgrep.dev/playground/r/l4TlPRP/trailofbits.yaml.ansible.unarchive-validate-certs-disabled.unarchive-validate-certs-disabled
        origin: community
  patterns:
  - pattern-inside: |
      $UNARCHIVE:
        ...
  - metavariable-pattern:
      metavariable: "$UNARCHIVE"
      pattern-either:
      - pattern: unarchive
      - pattern: ansible.builtin.unarchive
  - pattern: "$KEY: $VALUE"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: validate_certs
  - metavariable-pattern:
      metavariable: "$VALUE"
      pattern-either:
      - pattern: 'false'
- id: trailofbits.yaml.ansible.wrm-cert-validation-ignore.wrm-cert-validation-ignore
  message: Found Windows Remote Management connection with certificate validation
    disabled
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
    subcategory:
    - audit
    technology:
    - ansible
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/os_guide/windows_winrm.html#https-certificate-validation
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.wrm-cert-validation-ignore.wrm-cert-validation-ignore
    shortlink: https://sg.run/nJlP1
    semgrep.dev:
      rule:
        r_id: 113236
        rv_id: 253307
        rule_id: oqUgbWQ
        version_id: YDTNPeX
        url: https://semgrep.dev/playground/r/YDTNPeX/trailofbits.yaml.ansible.wrm-cert-validation-ignore.wrm-cert-validation-ignore
        origin: community
  pattern: 'ansible_winrm_server_cert_validation: ignore'
- id: trailofbits.yaml.ansible.yum-unencrypted-url.yum-unencrypted-url
  message: Found yum download with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    - yum
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_module.html#parameter-name
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.yum-unencrypted-url.yum-unencrypted-url
    shortlink: https://sg.run/Ew4NE
    semgrep.dev:
      rule:
        r_id: 113237
        rv_id: 253308
        rule_id: zdUKbXv
        version_id: JdT5gj1
        url: https://semgrep.dev/playground/r/JdT5gj1/trailofbits.yaml.ansible.yum-unencrypted-url.yum-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $YUM:
        ...
  - metavariable-pattern:
      metavariable: "$YUM"
      pattern-either:
      - pattern: yum
      - pattern: ansible.builtin.yum
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: name
      - pattern: pkg
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.yum-validate-certs-disabled.yum-validate-certs-disabled
  message: Found yum with SSL verification disabled
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
    subcategory:
    - audit
    technology:
    - ansible
    - yum
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_module.html#parameter-validate_certs
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Authentication
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.yum-validate-certs-disabled.yum-validate-certs-disabled
    shortlink: https://sg.run/7Kvdw
    semgrep.dev:
      rule:
        r_id: 113238
        rv_id: 253309
        rule_id: pKU10q4
        version_id: 5PTk5zd
        url: https://semgrep.dev/playground/r/5PTk5zd/trailofbits.yaml.ansible.yum-validate-certs-disabled.yum-validate-certs-disabled
        origin: community
  patterns:
  - pattern-inside: |
      $YUM:
        ...
  - metavariable-pattern:
      metavariable: "$YUM"
      pattern-either:
      - pattern: yum
      - pattern: ansible.builtin.yum
  - pattern: "$KEY: $VALUE"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: validate_certs
  - metavariable-pattern:
      metavariable: "$VALUE"
      pattern-either:
      - pattern: 'false'
- id: trailofbits.yaml.ansible.zypper-repository-unencrypted-url.zypper-repository-unencrypted-url
  message: Found Zypper repository with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    - zypper
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/community/general/zypper_module.html#parameter-name
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.zypper-repository-unencrypted-url.zypper-repository-unencrypted-url
    shortlink: https://sg.run/L1Bkn
    semgrep.dev:
      rule:
        r_id: 113239
        rv_id: 253310
        rule_id: 2ZUzvAk
        version_id: GxTjwRj
        url: https://semgrep.dev/playground/r/GxTjwRj/trailofbits.yaml.ansible.zypper-repository-unencrypted-url.zypper-repository-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $ZYPPER:
        ...
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: repo
  - metavariable-pattern:
      metavariable: "$ZYPPER"
      pattern-either:
      - pattern: zypper_repository
      - pattern: community.general.zypper_repository
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
- id: trailofbits.yaml.ansible.zypper-unencrypted-url.zypper-unencrypted-url
  message: Found Zypper package with unencrypted URL (e.g. HTTP, FTP, etc.)
  languages:
  - yaml
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    subcategory:
    - audit
    technology:
    - ansible
    - zypper
    confidence: HIGH
    likelihood: HIGH
    impact: HIGH
    references:
    - https://docs.ansible.com/ansible/latest/collections/community/general/zypper_module.html#parameter-name
    license: AGPL-3.0 license
    vulnerability_class:
    - Mishandled Sensitive Information
    source: https://semgrep.dev/r/trailofbits.yaml.ansible.zypper-unencrypted-url.zypper-unencrypted-url
    shortlink: https://sg.run/8GLdB
    semgrep.dev:
      rule:
        r_id: 113240
        rv_id: 253311
        rule_id: X5UQzo1
        version_id: RGTevlQ
        url: https://semgrep.dev/playground/r/RGTevlQ/trailofbits.yaml.ansible.zypper-unencrypted-url.zypper-unencrypted-url
        origin: community
  patterns:
  - pattern-inside: |
      $ZYPPER:
        ...
  - pattern: "$KEY: '$VALUE'"
  - metavariable-pattern:
      metavariable: "$KEY"
      pattern-either:
      - pattern: name
      - pattern: pkg
  - metavariable-pattern:
      metavariable: "$ZYPPER"
      pattern-either:
      - pattern: zypper
      - pattern: community.general.zypper
  - metavariable-regex:
      metavariable: "$VALUE"
      regex: "(?i)^(http|ftp)://.*"
