---
rules:
- id: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
  message: Detected a request with potential user-input going into a OutputStream
    or Writer object. This bypasses any view or template environments, including HTML
    escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities.
    Consider using a view technology such as JavaServer Faces (JSFs) which automatically
    escapes HTML views.
  severity: WARNING
  options:
    interfile: true
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html
    subcategory:
    - vuln
    technology:
    - java
    - servlets
    interfile: true
    license: proprietary license - copyright Â© Semgrep, Inc.
    vulnerability_class:
    - Cross-Site-Scripting (XSS)
    source: https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
    shortlink: https://sg.run/KlRL
    semgrep.dev:
      rule:
        r_id: 9211
        rv_id: 833983
        rule_id: j2Uv7B
        version_id: kbT2llw
        url: https://semgrep.dev/playground/r/kbT2llw/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
        origin: community
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: "(HttpServletRequest $REQ).$REQFUNC(...)\n"
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: "$REQFUNC"
        regex: "(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "(HttpServletResponse $RESPONSE).getWriter(...).$WRITE(...)\n"
      - pattern: "(HttpServletResponse $RESPONSE).getOutputStream(...).$WRITE(...)\n"
      - pattern: "(java.io.PrintWriter $WRITER).$WRITE(...)\n"
      - pattern: "(PrintWriter $WRITER).$WRITE(...)\n"
      - pattern: "(javax.servlet.ServletOutputStream $WRITER).$WRITE(...)\n"
      - pattern: "(ServletOutputStream $WRITER).$WRITE(...)\n"
      - pattern: "(java.io.OutputStream $WRITER).$WRITE(...)\n"
      - pattern: "(OutputStream $WRITER).$WRITE(...)\n"
  pattern-sanitizers:
  - pattern-either:
    - pattern: Encode.forHtml(...)
    - pattern: "(PolicyFactory $POLICY).sanitize(...)"
    - pattern: "(AntiSamy $AS).scan(...)"
    - pattern: JSoup.clean(...)
    - pattern: org.apache.commons.lang.StringEscapeUtils.escapeHtml(...)
    - pattern: org.springframework.web.util.HtmlUtils.htmlEscape(...)
    - pattern: org.owasp.esapi.ESAPI.encoder().encodeForHTML(...)
- id: trailofbits.go.hanging-goroutine.hanging-goroutine
  message: Potential goroutine leak due to unbuffered channel send inside loop or
    unbuffered channel receive in select block
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-833: Deadlock'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: LOW
    technology:
    - "--no-technology--"
    description: Goroutine leaks
    references:
    - https://blog.trailofbits.com/2021/11/08/discovering-goroutine-leaks-with-semgrep
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.hanging-goroutine.hanging-goroutine
    shortlink: https://sg.run/Dw8o
    semgrep.dev:
      rule:
        r_id: 11752
        rv_id: 833264
        rule_id: EwUQp2
        version_id: o5TBEoD
        url: https://semgrep.dev/playground/r/o5TBEoD/trailofbits.go.hanging-goroutine.hanging-goroutine
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        for ... {
          ...
          go func(...) {
            ...
            $CHANNEL <- $VAL
            ...
          }(...)
        }
        ...
        $Y = <- $CHANNEL
        ...
    - pattern: |
        for ... {
          ...
          go func(...) {
            ...
            $CHANNEL <- $VAL
            ...
          }(...)
        }
        ...
        return <- $CHANNEL
    - pattern: |
        for ... {
          ...
          go func(...) {
            ...
            select {
              case ...
              case $CHANNEL <- $VAL: ...
              case ...
            }
            ...
          }(...)
        ...
        }
        ...
        return <- $CHANNEL
    - pattern: "go func(...){\n  ...\n  $CHANNEL <- $X\n  ...\n}(...)\n...\nselect
        {\ncase ...\ncase $Y = <- $CHANNEL: \n...\n}\n"
    - pattern: "go func(...){\n  ...\n  $CHANNEL <- $X\n  ...\n}(...)\n...\nselect
        {\ncase ...\ncase <- $CHANNEL: \n...\n}\n"
    - pattern: "go func(...){\n  ...\n  $CHANNEL <- $X\n  ...\n}(...)\n...\nselect
        {\ncase ...\ncase $Y <- $CHANNEL: \n...\n}\n"
  - pattern-inside: |
      $CHANNEL := make(...)
      ...
  - pattern-not-inside: |
      $CHANNEL := make(..., $T)
      ...
  - pattern-not: "go func(...){\n  ...\n  $CHANNEL <- $X\n  ...\n}(...)\n...\nselect
      {\ncase ...\ncase ...: \n  ...\n  ... = <- $CHANNEL\n  ...\n}\n"
  - pattern-not: "go func(...){\n  ...\n  $CHANNEL <- $X\n  ...\n}(...)\n...\nselect
      {\ncase ...\ncase ...: \n  ...\n  <-$CHANNEL\n  ...\n}\n"
- id: trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
  message: Missing `RUnlock` on an `RWMutex` (`$T` variable) lock before returning
    from a function
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Missing `RUnlock` on an `RWMutex` lock before returning from a function
    references:
    - https://pkg.go.dev/sync#RWMutex
    - https://blog.trailofbits.com/2020/06/09/how-to-check-if-a-mutex-is-locked-in-go/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
    shortlink: https://sg.run/9r40
    semgrep.dev:
      rule:
        r_id: 14223
        rv_id: 833267
        rule_id: 8GUzNK
        version_id: 2KT7x5g
        url: https://semgrep.dev/playground/r/2KT7x5g/trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
        origin: community
  patterns:
  - pattern-either:
    - pattern: panic(...)
    - pattern: return ...
  - metavariable-pattern:
      metavariable: "$T"
      patterns:
      - pattern: "($T : sync.RWMutex)\n"
  - pattern-inside: |
      $T.RLock()
      ...
  - pattern-not-inside: |
      $T.RUnlock()
      ...
  - pattern-not-inside: |
      defer $T.RUnlock()
      ...
  - pattern-not-inside: |
      defer func(...) {
        ...
        $T.RUnlock()
        ...
      }(...)
      ...
  - pattern-not-inside: "$FOO(..., ..., func(...) { \n    ... \n})\n"
  - pattern-not-inside: |
      return func(...) {
          ...
          $T.RUnlock()
          ...
      }
- id: trailofbits.go.missing-unlock-before-return.missing-unlock-before-return
  message: Missing mutex unlock (`$T` variable) before returning from a function.  This
    could result in panics resulting from double lock operations
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Missing `mutex` unlock before returning from a function
    references:
    - https://pkg.go.dev/sync#Mutex
    - https://blog.trailofbits.com/2020/06/09/how-to-check-if-a-mutex-is-locked-in-go/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.missing-unlock-before-return.missing-unlock-before-return
    shortlink: https://sg.run/18Bk
    semgrep.dev:
      rule:
        r_id: 14222
        rv_id: 833268
        rule_id: L1U5Gz
        version_id: X0T5Nkv
        url: https://semgrep.dev/playground/r/X0T5Nkv/trailofbits.go.missing-unlock-before-return.missing-unlock-before-return
        origin: community
  patterns:
  - pattern-either:
    - pattern: panic(...)
    - pattern: return ...
  - metavariable-pattern:
      metavariable: "$T"
      patterns:
      - pattern: "($T : sync.Mutex)\n"
  - pattern-inside: |
      $T.Lock()
      ...
  - pattern-not-inside: |
      $T.Unlock()
      ...
  - pattern-not-inside: |
      defer $T.Unlock()
      ...
  - pattern-not-inside: |
      defer func(...) {
        ...
        $T.Unlock()
        ...
      }(...)
      ...
  - pattern-not-inside: "$FOO(..., ..., func(...) { \n    ... \n})\n"
  - pattern-not-inside: |
      return func(...) {
          ...
          $T.Unlock()
          ...
      }
- id: trailofbits.go.nil-check-after-call.nil-check-after-call
  message: Potential `$FOO` nil dereference when `$BAR` is called
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-253: Incorrect Check of Function Return Value'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Possible nil dereferences
    references:
    - https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.nil-check-after-call.nil-check-after-call
    shortlink: https://sg.run/05g5
    semgrep.dev:
      rule:
        r_id: 11754
        rv_id: 833269
        rule_id: L1Ur2r
        version_id: jQTrXDK
        url: https://semgrep.dev/playground/r/jQTrXDK/trailofbits.go.nil-check-after-call.nil-check-after-call
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        $FOO.$BAR(...)
        ...
        if $FOO != nil { ... }
    - pattern: |
        $FOO.$BAR(...)
        ...
        if $FOO == nil { ... }
    - pattern: |
        $FUNC(..., $FOO.$BAR(...), ...)
        ...
        if $FOO != nil { ... }
    - pattern: |
        $FUNC(..., $FOO.$BAR(...), ...)
        ...
        if $FOO == nil { ... }
  - pattern-not: |
      $FOO.$BAR(...)
      ...
      $FOO = ...
      ...
      if $FOO != nil { ... }
  - pattern-not: |
      $FOO.$BAR(...)
      ...
      ..., $FOO, ... = ...
      ...
      if $FOO == nil { ... }
  - pattern-not: |
      $FOO.$BAR(...)
      ...
      ..., $FOO, ... = ...
      ...
      if $FOO != nil { ... }
  - pattern-not: |
      $FOO.$BAR(...)
      ...
      $FOO = ...
      ...
      if $FOO == nil { ... }
  - pattern-not: |
      ..., $FOO = $FOO.$BAR(...)
      ...
      if $FOO == nil { ... }
  - pattern-not: |
      ..., $FOO = $FOO.$BAR(...)
      ...
      if $FOO != nil { ... }
  - pattern-not: |
      $FOO = $FOO.$BAR(...)
      ...
      if $FOO == nil { ... }
  - pattern-not: |
      $FOO = $FOO.$BAR(...)
      ...
      if $FOO != nil { ... }
- id: trailofbits.go.racy-append-to-slice.racy-append-to-slice
  message: Appending `$SLICE` from multiple goroutines is not concurrency safe
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization
      (''Race Condition'')'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Concurrent calls to `append` from multiple goroutines
    references:
    - https://go.dev/blog/maps#concurrency
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.racy-append-to-slice.racy-append-to-slice
    shortlink: https://sg.run/jkNY
    semgrep.dev:
      rule:
        r_id: 11865
        rv_id: 833270
        rule_id: ReUoP7
        version_id: 1QTPL3x
        url: https://semgrep.dev/playground/r/1QTPL3x/trailofbits.go.racy-append-to-slice.racy-append-to-slice
        origin: community
  patterns:
  - pattern: "$SLICE = append($SLICE, $ITEM)\n"
  - pattern-either:
    - pattern-inside: |
        var $SLICE []$TYPE
        ...
        for ... {
          ...
          go func(...) {
            ...
            $SLICE = append($SLICE, ...)
            ...
          }(...)
          ...
        }
    - pattern-inside: |
        $SLICE := make([]$TYPE, ...)
        ...
        for ... {
          ...
          go func(...) {
            ...
            $SLICE = append($SLICE, ...)
            ...
          }(...)
          ...
        }
  - pattern-not-inside: |
      $MUTEX.Lock()
      ...
      $MUTEX.Unlock()
  - pattern-not-inside: |
      $MUTEX.Lock()
      ...
      defer $MUTEX.Unlock()
      ...
- id: trailofbits.go.racy-write-to-map.racy-write-to-map
  message: Writing `$MAP` from multiple goroutines is not concurrency safe
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization
      (''Race Condition'')'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Concurrent writes to the same map in multiple goroutines
    references:
    - https://go.dev/blog/maps#concurrency
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.racy-write-to-map.racy-write-to-map
    shortlink: https://sg.run/1Gnw
    semgrep.dev:
      rule:
        r_id: 11866
        rv_id: 833271
        rule_id: AbUGWD
        version_id: 9lTJ0qD
        url: https://semgrep.dev/playground/r/9lTJ0qD/trailofbits.go.racy-write-to-map.racy-write-to-map
        origin: community
  patterns:
  - pattern: "$MAP[$KEY] = $VALUE\n"
  - pattern-inside: |
      $MAP = make(map[$KTYPE]$VTYPE)
      ...
      for ... {
        ...
        go func(...) {
          ...
          $MAP[$KEY] = $VALUE
          ...
        }(...)
        ...
      }
  - pattern-not-inside: |
      $MUTEX.Lock()
      ...
      $MUTEX.Unlock()
  - pattern-not-inside: |
      $MUTEX.Lock()
      ...
      defer $MUTEX.Unlock()
      ...
- id: trailofbits.go.servercodec-readrequestbody-unhandled-nil.servercodec-readrequestbody-unhandled-nil
  message: The `func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error` function does
    not handle `nil` argument, as the `ServerCodec` interface requires. An incorrect
    implementation could lead to denial of service
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-476: NULL Pointer Dereference'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: LOW
    technology:
    - "--no-technology--"
    description: Possible incorrect `ServerCodec` interface implementation
    references:
    - https://github.com/golang/go/blob/go1.15.2/src/net/rpc/server.go#L643-L658
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.servercodec-readrequestbody-unhandled-nil.servercodec-readrequestbody-unhandled-nil
    shortlink: https://sg.run/lx09
    semgrep.dev:
      rule:
        r_id: 11757
        rv_id: 833272
        rule_id: QrUp7k
        version_id: yeTN1ek
        url: https://semgrep.dev/playground/r/yeTN1ek/trailofbits.go.servercodec-readrequestbody-unhandled-nil.servercodec-readrequestbody-unhandled-nil
        origin: community
  patterns:
  - pattern: |
      func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error {
        ...
      }
  - pattern-not: |
      func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error {
        ...
        if $ARG == nil { ... }
        ...
      }
  - pattern-not: |
      func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error {
        ...
        if $ARG != nil { ... }
        ...
      }
- id: trailofbits.go.sync-mutex-value-copied.sync-mutex-value-copied
  message: A `sync.Mutex` is copied in function `$FUNC` given that `$T` is value receiver.  As
    a result, the struct `$T` may not be locked as intended
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-688: Function Call With Incorrect Variable or Reference as Argument'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: HIGH
    impact: LOW
    technology:
    - "--no-technology--"
    description: Copying of `sync.Mutex` via value receivers
    references:
    - https://go101.org/article/concurrent-common-mistakes.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.sync-mutex-value-copied.sync-mutex-value-copied
    shortlink: https://sg.run/owlR
    semgrep.dev:
      rule:
        r_id: 11760
        rv_id: 833274
        rule_id: PeUBW1
        version_id: bZTBelR
        url: https://semgrep.dev/playground/r/bZTBelR/trailofbits.go.sync-mutex-value-copied.sync-mutex-value-copied
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        func ($T $TYPE) $FUNC(...){
          ...
          $T.Lock()
          ...
        }
    - pattern: |
        func ($T $TYPE) $FUNC(...){
          ...
          $T.RLock()
          ...
        }
  - pattern-not: |
      func ($T2 *$TYPE2) $FUNC(...){
        ...
      }
- id: trailofbits.go.unsafe-dll-loading.unsafe-dll-loading
  message: The function is vulnerable to DLL hijacking attacks. Use `windows.NewLazySystemDLL()`
    function to limit DLL search to the Windows directory
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-427: Uncontrolled Search Path Element'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - "--no-technology--"
    description: Use of function vulnerable to DLL hijacking attacks
    references:
    - https://pkg.go.dev/golang.org/x/sys/windows#LazyDLL
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.unsafe-dll-loading.unsafe-dll-loading
    shortlink: https://sg.run/poE3
    semgrep.dev:
      rule:
        r_id: 40518
        rv_id: 833275
        rule_id: pKUQBW
        version_id: NdTB2J9
        url: https://semgrep.dev/playground/r/NdTB2J9/trailofbits.go.unsafe-dll-loading.unsafe-dll-loading
        origin: community
  patterns:
  - pattern-either:
    - pattern: syscall.LoadDLL(...)
    - pattern: syscall.LoadLibrary(...)
    - pattern: windows.LoadDLL(...)
    - pattern: windows.MustLoadDLL(...)
    - pattern: syscall.NewLazyDLL(...)
    - pattern: |
        $X = windows.NewLazyDLL(...)
        ...
        $X.$Y()
        ...
        $X.System = true
    - pattern: |
        $X = windows.NewLazyDLL(...)
        ...
        $X.$Y()
  - pattern-not: |
      $X = windows.NewLazyDLL(...)
      ...
      $X.System = true
      ...
      $X.$Y()
- id: trailofbits.go.waitgroup-add-called-inside-goroutine.waitgroup-add-called-inside-goroutine
  message: |
    Calling `$WG.Add` inside of an anonymous goroutine may result in `$WG.Wait`
    waiting for more or less calls to `$WG.Done()` than expected
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Calls to `sync.WaitGroup.Add` inside of anonymous goroutines
    references:
    - https://go101.org/article/concurrent-common-mistakes.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.waitgroup-add-called-inside-goroutine.waitgroup-add-called-inside-goroutine
    shortlink: https://sg.run/z98W
    semgrep.dev:
      rule:
        r_id: 11761
        rv_id: 833276
        rule_id: JDUQ3v
        version_id: kbT2l5k
        url: https://semgrep.dev/playground/r/kbT2l5k/trailofbits.go.waitgroup-add-called-inside-goroutine.waitgroup-add-called-inside-goroutine
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        $WG := &sync.WaitGroup{}
        ...
        go func(...) {
          ...
          $WG.Add(...)
          ...
        }(...)
        ...
        $WG.Wait()
    - pattern: |
        var $WG sync.WaitGroup
        ...
        go func(...) {
          ...
          $WG.Add(...)
          ...
        }(...)
        ...
        $WG.Wait()
  - pattern-not-inside: |
      for ... {
        ...
        $WG.Add(...)
        ...
      }
- id: trailofbits.go.waitgroup-wait-inside-loop.waitgroup-wait-inside-loop
  message: Calling `$WG.Wait()` inside a loop blocks the call to `$WG.Done()`
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Calls to `sync.WaitGroup.Wait` inside a loop
    references:
    - https://go101.org/article/concurrent-common-mistakes.html
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.go.waitgroup-wait-inside-loop.waitgroup-wait-inside-loop
    shortlink: https://sg.run/pkGL
    semgrep.dev:
      rule:
        r_id: 11762
        rv_id: 833277
        rule_id: 5rU8Po
        version_id: w8TAx58
        url: https://semgrep.dev/playground/r/w8TAx58/trailofbits.go.waitgroup-wait-inside-loop.waitgroup-wait-inside-loop
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        var $WG sync.WaitGroup
        ...
        for ... {
          ...
          go func(...){
            ...
            defer $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
    - pattern: |
        $WG := &sync.WaitGroup{}
        ...
        for ... {
          ...
          go func(...){
            ...
            defer $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
    - pattern: |
        var $WG sync.WaitGroup
        ...
        for ... {
          ...
          go func(...){
            ...
            $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
    - pattern: |
        $WG := &sync.WaitGroup{}
        ...
        for ... {
          ...
          go func(...){
            ...
            $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
- id: trailofbits.javascript.apollo-graphql.schema-directives.schema-directives
  message: The Apollo GraphQL uses the 'schemaDirectives' option. This works in ApolloServer
    v2, but does nothing in version >=3. Depending on what the directives are used
    for, this can expose authenticated endpoints, disable rate limiting, and more.
    See the references on how to create custom directives in v3 and v4.
  languages:
  - js
  - ts
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-686: Function Call With Incorrect Argument Type'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - graphql
    - apollo-graphql-server
    description: Use of outdated ApolloServer option 'schemaDirectives'
    references:
    - https://www.apollographql.com/docs/apollo-server/schema/directives/#custom-directives
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.schema-directives.schema-directives
    shortlink: https://sg.run/wE2N
    semgrep.dev:
      rule:
        r_id: 60573
        rv_id: 833278
        rule_id: OrU1Oz
        version_id: xyTNew2
        url: https://semgrep.dev/playground/r/xyTNew2/trailofbits.javascript.apollo-graphql.schema-directives.schema-directives
        origin: community
  pattern-either:
  - pattern: 'new ApolloServer({..., schemaDirectives: ..., ...})

      '
- id: trailofbits.javascript.apollo-graphql.use-of-graphql-upload.use-of-graphql-upload
  languages:
  - js
  - ts
  message: 'The Apollo GraphQL server is using the graphql-upload library. This library
    allows file uploads using POSTs with content-type: multipart/form-data, which
    can enable to CSRF attacks. Ensure that you are enabling CSRF protection if you
    really need to use graphql-upload .'
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    subcategory:
    - vuln
    confidence: LOW
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - graphql
    - apollo-graphql-server
    description: Use of the graphql-upload library
    references:
    - https://github.com/apollographql/apollo-server/security/advisories/GHSA-2p3c-p3qw-69r4
    license: AGPL-3.0 license
    vulnerability_class:
    - Cross-Site Request Forgery (CSRF)
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.use-of-graphql-upload.use-of-graphql-upload
    shortlink: https://sg.run/xE20
    semgrep.dev:
      rule:
        r_id: 60574
        rv_id: 833279
        rule_id: eqUB1Q
        version_id: O9TJWB6
        url: https://semgrep.dev/playground/r/O9TJWB6/trailofbits.javascript.apollo-graphql.use-of-graphql-upload.use-of-graphql-upload
        origin: community
  patterns:
  - pattern: app.use(graphqlUploadExpress());
- id: trailofbits.javascript.apollo-graphql.v3-cors-express.v3-express-bad-cors
  languages:
  - js
  - ts
  message: The Apollo GraphQL server is setup with a CORS policy that reflects any
    origin, or with a regex that has known flaws.
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: HIGH
    technology:
    - graphql
    - apollo-graphql-server
    - apollo-graphql-server-v3
    description: Bad CORS policy
    references:
    - https://www.apollographql.com/docs/apollo-server/v3/security/cors#configuring-cors-options-for-apollo-server
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Validation
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.v3-cors-express.v3-express-bad-cors
    shortlink: https://sg.run/vE1n
    semgrep.dev:
      rule:
        r_id: 60577
        rv_id: 833282
        rule_id: ZqUbNY
        version_id: d6TKGL6
        url: https://semgrep.dev/playground/r/d6TKGL6/trailofbits.javascript.apollo-graphql.v3-cors-express.v3-express-bad-cors
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: "{ origin: $BAD_CORS_ORIGIN }\n"
    - metavariable-pattern:
        metavariable: "$BAD_CORS_ORIGIN"
        pattern-either:
        - pattern: 'true

            '
        - patterns:
          - pattern-either:
            - pattern: "$CORS_SINGLE_ORIGIN\n"
            - pattern: "[..., $CORS_SINGLE_ORIGIN, ...]\n"
          - metavariable-pattern:
              metavariable: "$CORS_SINGLE_ORIGIN"
              pattern-either:
              - pattern-regex: "^/.*[^\\\\]\\..*/$"
              - pattern-regex: "^/.*[^$]/$"
              - pattern: "'null'\n"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $X = require('apollo-server-express');
          ...
      - pattern-inside: |
          import 'apollo-server-express';
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $X = new ApolloServer({...})
            ...
            $X.applyMiddleware({...})
        - pattern: "$X.applyMiddleware({..., cors: $CORS_ORIGIN, ...})\n"
    - focus-metavariable: "$CORS_ORIGIN"
- id: trailofbits.javascript.apollo-graphql.v3-cors-express.v3-express-no-cors
  languages:
  - js
  - ts
  message: The Apollo GraphQL server lacks a CORS policy. By default, the server uses
    the Access-Control-Allow-Origin HTTP header with the wildcard value (*).
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: LOW
    impact: LOW
    technology:
    - graphql
    - apollo-graphql-server
    - apollo-graphql-server-v3
    description: Lack of CORS policy
    references:
    - https://www.apollographql.com/docs/apollo-server/v3/security/cors#configuring-cors-options-for-apollo-server
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Validation
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.v3-cors-express.v3-express-no-cors
    shortlink: https://sg.run/eNE0
    semgrep.dev:
      rule:
        r_id: 60576
        rv_id: 833281
        rule_id: d8UYAJ
        version_id: vdTOzdO
        url: https://semgrep.dev/playground/r/vdTOzdO/trailofbits.javascript.apollo-graphql.v3-cors-express.v3-express-no-cors
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('apollo-server-express');
        ...
    - pattern-inside: |
        import 'apollo-server-express';
        ...
  - pattern: "$X = new ApolloServer({...})\n"
  - pattern-not-inside: |
      $X = new ApolloServer({...})
      ...
      $X.applyMiddleware({..., cors: ..., ...})
- id: trailofbits.javascript.apollo-graphql.v3-cors.v3-bad-cors
  languages:
  - js
  - ts
  message: The Apollo GraphQL server is setup with a CORS policy that reflects any
    origin, or with a regex that has known flaws.
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: HIGH
    technology:
    - graphql
    - apollo-graphql-server
    description: Bad CORS policy
    references:
    - https://www.apollographql.com/docs/apollo-server/v3/security/cors#configuring-cors-options-for-apollo-server
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Validation
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.v3-cors.v3-bad-cors
    shortlink: https://sg.run/Zo3x
    semgrep.dev:
      rule:
        r_id: 60579
        rv_id: 833284
        rule_id: EwUZNW
        version_id: nWTy4kP
        url: https://semgrep.dev/playground/r/nWTy4kP/trailofbits.javascript.apollo-graphql.v3-cors.v3-bad-cors
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: "{ origin: $BAD_CORS_ORIGIN }\n"
    - metavariable-pattern:
        metavariable: "$BAD_CORS_ORIGIN"
        pattern-either:
        - pattern: 'true

            '
        - patterns:
          - pattern-either:
            - pattern: "$CORS_SINGLE_ORIGIN\n"
            - pattern: "[..., $CORS_SINGLE_ORIGIN, ...]\n"
          - metavariable-pattern:
              metavariable: "$CORS_SINGLE_ORIGIN"
              pattern-either:
              - pattern-regex: "^/.*[^\\\\]\\..*/$"
              - pattern-regex: "^/.*[^$]/$"
              - pattern: "'null'\n"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $X = require('apollo-server');
          ...
      - pattern-inside: |
          import 'apollo-server';
          ...
    - pattern: 'new ApolloServer({..., cors: $CORS_ORIGIN, ...})

        '
    - focus-metavariable: "$CORS_ORIGIN"
- id: trailofbits.javascript.apollo-graphql.v3-cors.v3-no-cors
  languages:
  - js
  - ts
  message: The Apollo GraphQL server lacks a CORS policy. By default, the batteries-included
    apollo-server package serves the Access-Control-Allow-Origin HTTP header with
    the wildcard value (*).
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: LOW
    impact: LOW
    technology:
    - graphql
    - apollo-graphql-server
    - apollo-graphql-server-v3
    description: Lack of CORS policy
    references:
    - https://www.apollographql.com/docs/apollo-server/v3/security/cors#configuring-cors-options-for-apollo-server
    license: AGPL-3.0 license
    vulnerability_class:
    - Improper Validation
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.v3-cors.v3-no-cors
    shortlink: https://sg.run/dbNX
    semgrep.dev:
      rule:
        r_id: 60578
        rv_id: 833283
        rule_id: nJU3P4
        version_id: ZRTlPW3
        url: https://semgrep.dev/playground/r/ZRTlPW3/trailofbits.javascript.apollo-graphql.v3-cors.v3-no-cors
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('apollo-server');
        ...
    - pattern-inside: |
        import 'apollo-server';
        ...
  - pattern: 'new ApolloServer({...})

      '
  - pattern-not: 'new ApolloServer({..., cors: ..., ...})

      '
- id: trailofbits.javascript.apollo-graphql.v3-csrf-prevention.v3-csrf-prevention
  languages:
  - js
  - ts
  message: The Apollo GraphQL server lacks the 'csrfPrevention' option. This option
    is 'false' by the default in v3 of the Apollo GraphQL v3, which can enable CSRF
    attacks.
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - graphql
    - apollo-graphql-server
    - apollo-graphql-server-v3
    description: Lack of CSRF prevention
    references:
    - https://www.apollographql.com/docs/apollo-server/v3/security/cors/#preventing-cross-site-request-forgery-csrf
    license: AGPL-3.0 license
    vulnerability_class:
    - Cross-Site Request Forgery (CSRF)
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.v3-csrf-prevention.v3-csrf-prevention
    shortlink: https://sg.run/nEGg
    semgrep.dev:
      rule:
        r_id: 60580
        rv_id: 833285
        rule_id: 7KU8o3
        version_id: ExTrD6A
        url: https://semgrep.dev/playground/r/ExTrD6A/trailofbits.javascript.apollo-graphql.v3-csrf-prevention.v3-csrf-prevention
        origin: community
  patterns:
  - pattern: new ApolloServer({...})
  - pattern-not: 'new ApolloServer({..., csrfPrevention: true, ...})

      '
- id: trailofbits.javascript.apollo-graphql.v4-csrf-prevention.v4-csrf-prevention
  languages:
  - js
  - ts
  message: The Apollo GraphQL server sets the 'csrfPrevention' option to false. This
    can enable CSRF attacks.
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - graphql
    - apollo-graphql-server
    - apollo-graphql-server-v4
    description: CSRF protection disabled
    references:
    - https://www.apollographql.com/docs/apollo-server/v3/security/cors/#preventing-cross-site-request-forgery-csrf
    fix-regex:
      regex: csrfPrevention:\s*false
      replacement: 'csrfPrevention: true'
    license: AGPL-3.0 license
    vulnerability_class:
    - Cross-Site Request Forgery (CSRF)
    source: https://semgrep.dev/r/trailofbits.javascript.apollo-graphql.v4-csrf-prevention.v4-csrf-prevention
    shortlink: https://sg.run/Eb1P
    semgrep.dev:
      rule:
        r_id: 60581
        rv_id: 833286
        rule_id: L1UjQ3
        version_id: 7ZTx9PE
        url: https://semgrep.dev/playground/r/7ZTx9PE/trailofbits.javascript.apollo-graphql.v4-csrf-prevention.v4-csrf-prevention
        origin: community
  patterns:
  - pattern: 'new ApolloServer({..., csrfPrevention: false, ...})

      '
- id: trailofbits.python.lxml-in-pandas.lxml-in-pandas
  message: Found usage of the `$FLAVOR` library, which is vulnerable to attacks such
    as XML external entity (XXE) attacks
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - pandas
    description: Potential XXE attacks from loading `lxml` in pandas
    references:
    - https://lxml.de/FAQ.html
    license: AGPL-3.0 license
    vulnerability_class:
    - XML Injection
    source: https://semgrep.dev/r/trailofbits.python.lxml-in-pandas.lxml-in-pandas
    shortlink: https://sg.run/1z1G
    semgrep.dev:
      rule:
        r_id: 17166
        rv_id: 833290
        rule_id: 0oUrdJ
        version_id: QkTkr22
        url: https://semgrep.dev/playground/r/QkTkr22/trailofbits.python.lxml-in-pandas.lxml-in-pandas
        origin: community
  pattern-either:
  - patterns:
    - pattern: pandas.read_html($IO)
    - pattern-not: pandas.read_html(**$KWARGS)
  - patterns:
    - metavariable-pattern:
        metavariable: "$FLAVOR"
        patterns:
        - pattern: "..."
        - pattern-not: '"bs4"

            '
        - pattern-not: '"html5lib"

            '
    - pattern-either:
      - pattern: pandas.read_html(..., flavor=$FLAVOR, ...)
      - patterns:
        - pattern-inside: |
            $KWARGS = {..., "flavor": $FLAVOR, ...}
            ...
        - pattern: 'pandas.read_html(**$KWARGS)

            '
- id: trailofbits.python.msgpack-numpy.msgpack-numpy
  message: Found usage of msgpack-numpy unpacking, which relies on pickle to deserialize
    numpy arrays containing objects. Functions reliant on pickle can result in arbitrary
    code execution.  Consider switching to a safer serialization method.
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - numpy
    description: Potential arbitrary code execution from functions reliant on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.msgpack-numpy.msgpack-numpy
    shortlink: https://sg.run/r6pr1
    semgrep.dev:
      rule:
        r_id: 124725
        rv_id: 833291
        rule_id: GdUvWBy
        version_id: 3ZT3Abe
        url: https://semgrep.dev/playground/r/3ZT3Abe/trailofbits.python.msgpack-numpy.msgpack-numpy
        origin: community
  pattern-either:
  - patterns:
    - pattern: msgpack.$FN(...)
    - metavariable-regex:
        metavariable: "$FN"
        regex: "(loads?|dumps?|packb?|unpackb?)"
    - pattern-inside: |
        msgpack_numpy.patch()
        ...
  - patterns:
    - pattern: msgpack.$FN(..., object_hook=msgpack_numpy.decode, ...)
    - metavariable-regex:
        metavariable: "$FN"
        regex: unpackb?
  - patterns:
    - pattern: msgpack.$FN(..., default=msgpack_numpy.encode, ...)
    - metavariable-regex:
        metavariable: "$FN"
        regex: packb?
- id: trailofbits.python.pickles-in-keras-deprecation.pickles-in-keras-deprecation
  message: The usage of pickle and hdf5 formats for model files are deprecated in
    Keras. The keras.models.load_model function is deprecated as well. Keras is now
    embedded in Tensorflow 2 under tensorflow.keras.
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - keras
    description: Potential arbitrary code execution from Keras' load_model function
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-keras-deprecation.pickles-in-keras-deprecation
    shortlink: https://sg.run/NbJRG
    semgrep.dev:
      rule:
        r_id: 124727
        rv_id: 833299
        rule_id: AbU9npB
        version_id: BjTe0vg
        url: https://semgrep.dev/playground/r/BjTe0vg/trailofbits.python.pickles-in-keras-deprecation.pickles-in-keras-deprecation
        origin: community
  patterns:
  - pattern-either:
    - pattern: keras.models.load_model(...)
    - pattern: tensorflow.keras.models.load_model(...)
    - pattern: keras.saving.load_model(...)
    - pattern: tensorflow.keras.saving.load_model(...)
  - pattern-not:
      patterns:
      - pattern-either:
        - pattern: keras.models.load_model($FILE)
        - pattern: tensorflow.keras.models.load_model($FILE)
        - pattern: keras.saving.load_model($FILE)
        - pattern: tensorflow.keras.saving.load_model($FILE)
      - metavariable-regex:
          metavariable: "$FILE"
          regex: ".*\\.keras"
- id: trailofbits.python.pickles-in-keras.pickles-in-keras
  message: |-
    Keras' load_model function may result in arbitrary code execution: - It can load vulnerable pickled models - It can load an hdf5 model that contains a lambda layer with arbitrary code
      that will be executed every time the model is used (loading, training, eval)
    Note: Keras loading with the built-in file format should be safe as long as checks are not disabled.
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - keras
    description: Potential arbitrary code execution from Keras' load_model function
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-keras.pickles-in-keras
    shortlink: https://sg.run/kxK8o
    semgrep.dev:
      rule:
        r_id: 124728
        rv_id: 833300
        rule_id: BYUXGv6
        version_id: DkTG07g
        url: https://semgrep.dev/playground/r/DkTG07g/trailofbits.python.pickles-in-keras.pickles-in-keras
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: keras.models.load_model(...)
      - pattern-not: keras.models.load_model("...", ...)
    - patterns:
      - pattern: tensorflow.keras.models.load_model(...)
      - pattern-not: tensorflow.keras.models.load_model("...", ...)
    - patterns:
      - pattern: keras.saving.load_model(...)
      - pattern-not: keras.saving.load_model("...", ...)
    - patterns:
      - pattern: tensorflow.keras.saving.load_model(...)
      - pattern-not: tensorflow.keras.saving.load_model("...", ...)
- id: trailofbits.python.pickles-in-numpy.pickles-in-numpy
  message: Functions reliant on pickle can result in arbitrary code execution.  Consider
    using fickling or switching to a safer serialization method
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - numpy
    description: Potential arbitrary code execution from `NumPy` functions reliant
      on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-numpy.pickles-in-numpy
    shortlink: https://sg.run/ryKe
    semgrep.dev:
      rule:
        r_id: 17169
        rv_id: 833301
        rule_id: lBUWjy
        version_id: WrTdpJ9
        url: https://semgrep.dev/playground/r/WrTdpJ9/trailofbits.python.pickles-in-numpy.pickles-in-numpy
        origin: community
  patterns:
  - pattern: numpy.load(..., allow_pickle=$VALUE, ...)
  - pattern-not: numpy.load("...", ...)
  - pattern-not: numpy.load(..., file="...", ...)
  - metavariable-pattern:
      metavariable: "$VALUE"
      patterns:
      - pattern-not: 'False

          '
      - pattern-not: "[]\n"
      - pattern-not: 'None

          '
      - pattern-not: '""

          '
- id: trailofbits.python.pickles-in-pandas.pickles-in-pandas
  message: Functions reliant on pickle can result in arbitrary code execution. Consider
    using fickling or switching to a safer serialization method
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - pandas
    description: Potential arbitrary code execution from `Pandas` functions reliant
      on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-pandas.pickles-in-pandas
    shortlink: https://sg.run/bXQW
    semgrep.dev:
      rule:
        r_id: 17170
        rv_id: 833302
        rule_id: PeU06j
        version_id: 0bTwbqN
        url: https://semgrep.dev/playground/r/0bTwbqN/trailofbits.python.pickles-in-pandas.pickles-in-pandas
        origin: community
  patterns:
  - pattern-either:
    - pattern: pandas.read_pickle(...)
    - pattern: pandas.to_pickle(...)
    - patterns:
      - pattern-inside: |
          import pandas
          ...
      - pattern: "$SMTH.to_pickle(...)"
  - pattern-not: pandas.read_pickle("...")
  - pattern-not: pandas.to_pickle(..., "...")
  - pattern-not: $SMTH.to_pickle("...")
- id: trailofbits.python.pickles-in-pytorch-distributed.pickles-in-pytorch-distributed
  message: Functions reliant on pickle can result in arbitrary code execution
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - pytorch
    description: Potential arbitrary code execution from `PyTorch.Distributed` functions
      reliant on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch-distributed.pickles-in-pytorch-distributed
    shortlink: https://sg.run/ZZxW
    semgrep.dev:
      rule:
        r_id: 44135
        rv_id: 833303
        rule_id: qNUrw1
        version_id: K3Trq3x
        url: https://semgrep.dev/playground/r/K3Trq3x/trailofbits.python.pickles-in-pytorch-distributed.pickles-in-pytorch-distributed
        origin: community
  patterns:
  - pattern-either:
    - pattern: torch.distributed.broadcast_object_list(...)
    - pattern: torch.distributed.all_gather_object(...)
    - pattern: torch.distributed.gather_object(...)
    - pattern: torch.distributed.scatter_object_list(...)
- id: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch
  message: Functions reliant on pickle can result in arbitrary code execution.  Consider
    loading from `state_dict`, using fickling, or switching to a safer serialization
    method like ONNX
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - pytorch
    description: Potential arbitrary code execution from `PyTorch` functions reliant
      on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch
    shortlink: https://sg.run/NwQy
    semgrep.dev:
      rule:
        r_id: 17171
        rv_id: 833304
        rule_id: JDU6WD
        version_id: qkTQnJ3
        url: https://semgrep.dev/playground/r/qkTQnJ3/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch
        origin: community
  patterns:
  - pattern-either:
    - pattern: torch.save(...)
    - pattern: torch.load(...)
  - pattern-not: torch.load("...")
  - pattern-not: torch.save(..., "...")
  - pattern-not: torch.save($M.state_dict(), ...)
  - pattern-not-inside: "$M.load_state_dict(...)"
  - pattern-not:
      patterns:
      - pattern: torch.save($STATE_DICT, ...)
      - pattern-inside: |
          $STATE_DICT = $M.state_dict()
          ...
- id: trailofbits.python.pickles-in-tensorflow.pickles-in-tensorflow
  message: Tensorflow's low-level load function may result in arbitrary code execution.
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - keras
    description: Potential arbitrary code execution from tensorflow's load function
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-tensorflow.pickles-in-tensorflow
    shortlink: https://sg.run/wd5jn
    semgrep.dev:
      rule:
        r_id: 124729
        rv_id: 833305
        rule_id: DbU6e7r
        version_id: l4TyO1n
        url: https://semgrep.dev/playground/r/l4TyO1n/trailofbits.python.pickles-in-tensorflow.pickles-in-tensorflow
        origin: community
  patterns:
  - pattern: tensorflow.saved_model.load(...)
  - pattern-not: tensorflow.saved_model.load("...", ...)
- id: trailofbits.python.scikit-joblib-load.scikit-joblib-load
  message: Scikit `joblib` uses pickle under the hood. Functions reliant on pickle
    can result in arbitrary code execution. Consider using `skops` instead.
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - scikit
    description: Potential arbitrary code execution from `SciKit.Joblib` functions
      reliant on pickling
    references:
    - https://scikit-learn.org/stable/model_persistence.html
    license: AGPL-3.0 license
    vulnerability_class:
    - 'Insecure Deserialization '
    source: https://semgrep.dev/r/trailofbits.python.scikit-joblib-load.scikit-joblib-load
    shortlink: https://sg.run/wzW6
    semgrep.dev:
      rule:
        r_id: 43929
        rv_id: 833309
        rule_id: DbULlX
        version_id: zyTWJrZ
        url: https://semgrep.dev/playground/r/zyTWJrZ/trailofbits.python.scikit-joblib-load.scikit-joblib-load
        origin: community
  patterns:
  - pattern: joblib.load(...)
  - pattern-not: joblib.load("...")
- id: trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
  message: Possible path traversal through `tarfile.open($PATH).extractall()` if the
    source tar is controlled by an attacker
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - "--no-technology--"
    description: Potential path traversal in call to `extractall` for a `tarfile`
    references:
    - https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall
    license: AGPL-3.0 license
    vulnerability_class:
    - Path Traversal
    source: https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
    shortlink: https://sg.run/2RLD
    semgrep.dev:
      rule:
        r_id: 11763
        rv_id: 833310
        rule_id: GdUZxq
        version_id: pZTXjAW
        url: https://semgrep.dev/playground/r/pZTXjAW/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        with tarfile.open(...) as $TAR:
            ...
            $TAR.extractall(...)
    - pattern: 'tarfile.open(...).extractall(...)

        '
    - pattern: |
        $TAR = tarfile.open(...)
        ...
        $TAR.extractall(...)
  - pattern-not: |
      with tarfile.open(...) as $TAR:
          ...
          $TAR.extractall(..., members=$MEMBERS, ...)
  - pattern-not: 'tarfile.open(...).extractall(..., members=$MEMBERS, ...)

      '
  - pattern-not: |
      $TAR = tarfile.open(...)
      ...
      $TAR.extractall(..., members=$MEMBERS, ...)
- id: trailofbits.python.waiting-with-pytorch-distributed.waiting-with-pytorch-distributed
  message: Not waiting for requests is a source of undefined behavior
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: LOW
    impact: LOW
    technology:
    - pytorch
    description: Possible `PyTorch` undefined behavior when not waiting for requests
    references:
    - https://pytorch.org/docs/stable/distributed.html#torch.distributed.isend
    license: AGPL-3.0 license
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/trailofbits.python.waiting-with-pytorch-distributed.waiting-with-pytorch-distributed
    shortlink: https://sg.run/LpoX
    semgrep.dev:
      rule:
        r_id: 44139
        rv_id: 833312
        rule_id: 5rUxGL
        version_id: X0T5Nnv
        url: https://semgrep.dev/playground/r/X0T5Nnv/trailofbits.python.waiting-with-pytorch-distributed.waiting-with-pytorch-distributed
        origin: community
  patterns:
  - pattern-either:
    - pattern: "$REQ = torch.distributed.irecv(...)"
    - pattern: "$REQ = torch.distributed.isend(...)"
  - pattern-not-inside: |
      ...
      $REQ.wait()
