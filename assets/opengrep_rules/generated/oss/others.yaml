---
rules:
- id: gitlab.eslint.detect-object-injection
  patterns:
  - pattern: "$O[$ARG]"
  - pattern-not: $O["..."]
  - pattern-not: "$O[($ARG : float)]"
  - pattern-not-inside: |
      $ARG = [$V];
      ...
      <... $O[$ARG] ...>;
  - pattern-not-inside: |
      $ARG = $V;
      ...
      <... $O[$ARG] ...>;
  - metavariable-regex:
      metavariable: "$ARG"
      regex: "(?![0-9]+)"
  message: Bracket object notation with user input is present, this might allow an
    attacker to access all properties of the object and even it's prototype, leading
    to possible code execution.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: eslint.detect-object-injection
    secondary_identifiers:
    - name: ESLint rule ID security/detect-object-injection
      type: eslint_rule_id
      value: security/detect-object-injection
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-object-injection
    shortlink: https://sg.run/8nbQ
    semgrep.dev:
      rule:
        r_id: 11584
        rv_id: 56280
        rule_id: NbUAnd
        version_id: rxTqor
        url: https://semgrep.dev/playground/r/rxTqor/gitlab.eslint.detect-object-injection
        origin: community
- id: mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
  patterns:
  - pattern-either:
    - pattern: "$X.setVisibility(View.GONE);\n"
    - pattern: |
        $V = View.GONE;
        ...
        $X.setVisibility($V);
    - pattern: "$X.setVisibility(View.INVISIBLE);\n"
    - pattern: |
        $V = View.INVISIBLE;
        ...
        $X.setVisibility($V);
  message: Hidden elements in view can be used to hide data from user. But this data
    can be leaked. If the view contains sensitive data, it might still be accessible
    through memory inspection. A good practice is to clear sensitive data before hiding
    it.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-919
    owasp-mobile: m1
    masvs: storage-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
    shortlink: https://sg.run/YeEe
    semgrep.dev:
      rule:
        r_id: 43714
        rv_id: 833208
        rule_id: L1UJDJ
        version_id: zyTWJBg
        url: https://semgrep.dev/playground/r/zyTWJBg/mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
        origin: community
- id: mobsf.mobsfscan.android.logging.android_logging
  patterns:
  - pattern-not: System.out.print();
  - pattern-not: System.out.println();
  - pattern-not: System.err.print();
  - pattern-not: System.err.println();
  - pattern-not: Log.$D("...", "...", ...);
  - pattern-not: Log.$D($T, "...", ...);
  - pattern-not: System.out.print("...");
  - pattern-not: System.out.println("...");
  - pattern-not: System.err.print("...");
  - pattern-not: System.err.println("...");
  - pattern-either:
    - pattern: 'Log.$D($T, $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X, ...);

        '
    - pattern: |
        $Y = $Z;
        ...
        Log.$D($T,<... $Y ...>, ...);
    - pattern: 'System.out.print(...);

        '
    - pattern: 'System.err.print(...);

        '
    - pattern: 'System.out.println(...);

        '
    - pattern: 'System.err.println(...);

        '
  message: The App logs information. Please ensure that sensitive information is never
    logged.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-532
    owasp-mobile: m1
    masvs: storage-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.logging.android_logging
    shortlink: https://sg.run/6pQo
    semgrep.dev:
      rule:
        r_id: 43715
        rv_id: 833209
        rule_id: 8GU0OP
        version_id: pZTXj2v
        url: https://semgrep.dev/playground/r/pZTXj2v/mobsf.mobsfscan.android.logging.android_logging
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_api_key
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}key.{0,100})"
  message: A hardcoded Key is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_api_key
    shortlink: https://sg.run/p02g
    semgrep.dev:
      rule:
        r_id: 43718
        rv_id: 833212
        rule_id: 3qUgDz
        version_id: jQTrX18
        url: https://semgrep.dev/playground/r/jQTrX18/mobsf.mobsfscan.android.secrets.hardcoded_api_key
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_password
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}pass.{0,100})"
  message: A hardcoded password in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_password
    shortlink: https://sg.run/oWp9
    semgrep.dev:
      rule:
        r_id: 43716
        rv_id: 833210
        rule_id: gxUpG8
        version_id: 2KT7xRo
        url: https://semgrep.dev/playground/r/2KT7xRo/mobsf.mobsfscan.android.secrets.hardcoded_password
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_secret
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}secret.{0,100})"
  message: A hardcoded secret is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_secret
    shortlink: https://sg.run/23O0
    semgrep.dev:
      rule:
        r_id: 43719
        rv_id: 833213
        rule_id: 4bUJWL
        version_id: 1QTPLEB
        url: https://semgrep.dev/playground/r/1QTPLEB/mobsf.mobsfscan.android.secrets.hardcoded_secret
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_username
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}user.{0,100})"
  message: A hardcoded username in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_username
    shortlink: https://sg.run/zXGG
    semgrep.dev:
      rule:
        r_id: 43717
        rv_id: 833211
        rule_id: QrULll
        version_id: X0T5NYj
        url: https://semgrep.dev/playground/r/X0T5NYj/mobsf.mobsfscan.android.secrets.hardcoded_username
        origin: community
- id: mobsf.mobsfscan.android.word_readable_writable.world_readable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_READABLE

        '
  message: The file is World Readable. Any App can read from the file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.word_readable_writable.world_readable
    shortlink: https://sg.run/XxEK
    semgrep.dev:
      rule:
        r_id: 43720
        rv_id: 833214
        rule_id: PeUKq9
        version_id: 9lTJ03r
        url: https://semgrep.dev/playground/r/9lTJ03r/mobsf.mobsfscan.android.word_readable_writable.world_readable
        origin: community
- id: mobsf.mobsfscan.android.word_readable_writable.world_writeable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_WRITEABLE

        '
  message: The file is World Readable and Writable. Any App can read/write to the
    file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.word_readable_writable.world_writeable
    shortlink: https://sg.run/jGlY
    semgrep.dev:
      rule:
        r_id: 43721
        rv_id: 833215
        rule_id: JDU4Ab
        version_id: yeTN1qo
        url: https://semgrep.dev/playground/r/yeTN1qo/mobsf.mobsfscan.android.word_readable_writable.world_writeable
        origin: community
- id: mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
  patterns:
  - pattern-either:
    - pattern: 'import com.google.android.gms.safetynet.SafetyNetApi;

        '
    - pattern: |
        $S = SafetyNet.getClient(...);
        ...
        $T = $S.attest(...);
    - pattern: 'new RNGoogleSafetyNetPackage(...)

        '
  message: 'This app does not uses SafetyNet Attestation API that provides cryptographically-signed
    attestation, assessing the device''s integrity. This check helps to ensure that
    the servers are interacting with the genuine app running on a genuine Android
    device. '
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-353
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
    shortlink: https://sg.run/1lOw
    semgrep.dev:
      rule:
        r_id: 43722
        rv_id: 833216
        rule_id: 5rUx0W
        version_id: rxTDznQ
        url: https://semgrep.dev/playground/r/rxTDznQ/mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
        origin: community
- id: mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
  patterns:
  - pattern-either:
    - pattern: 'getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().setFlags($V);
    - pattern: 'getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().addFlags($V);
    - pattern: "$A.getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().setFlags($V);
    - pattern: "$A.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().addFlags($V);
  message: This app does not have capabilities to prevent against Screenshots from
    Recent Task History/ Now On Tap etc.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m2
    masvs: storage-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
    shortlink: https://sg.run/9jOY
    semgrep.dev:
      rule:
        r_id: 43723
        rv_id: 833217
        rule_id: GdUg51
        version_id: bZTBeEj
        url: https://semgrep.dev/playground/r/bZTBeEj/mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
        origin: community
- id: mobsf.mobsfscan.best_practices.root_detection.android_root_detection
  patterns:
  - pattern-either:
    - pattern: "$J.isJailBroken(...)\n"
    - pattern: "$R.isDeviceRooted(...)\n"
    - pattern: "$R.isRooted(...)\n"
    - pattern: 'RootTools.isAccessGiven(...)

        '
    - pattern: '$MTD.contains("test-keys")

        '
  message: This app does not have root detection capabilities. Running a sensitive
    application on a rooted device questions the device integrity and affects users
    data.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-919
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.root_detection.android_root_detection
    shortlink: https://sg.run/y25x
    semgrep.dev:
      rule:
        r_id: 43724
        rv_id: 833218
        rule_id: ReUdYj
        version_id: NdTB262
        url: https://semgrep.dev/playground/r/NdTB262/mobsf.mobsfscan.best_practices.root_detection.android_root_detection
        origin: community
- id: mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
  patterns:
  - pattern-either:
    - pattern: "$F.setFilterTouchesWhenObscured(true);\n"
  message: This app does not have capabilities to prevent tapjacking attacks. An attacker
    can hijack the user's taps and tricks him into performing some critical operations
    that he did not intend to.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m1
    masvs: platform-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-for-overlay-attacks-mstg-platform-9
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
    shortlink: https://sg.run/rqjn
    semgrep.dev:
      rule:
        r_id: 43725
        rv_id: 833219
        rule_id: AbUx1o
        version_id: kbT2lWP
        url: https://semgrep.dev/playground/r/kbT2lWP/mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
        origin: community
- id: mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
  patterns:
  - pattern-either:
    - pattern: 'import com.babylon.certificatetransparency;

        '
    - pattern: 'new CTInterceptorBuilder(...)

        '
    - pattern: 'new CTHostnameVerifierBuilder(...)

        '
  message: This app does not enforce TLS Certificate Transparency that helps to detect
    SSL certificates that have been mistakenly issued by a certificate authority or
    maliciously acquired from an otherwise unimpeachable certificate authority.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
    shortlink: https://sg.run/bERp
    semgrep.dev:
      rule:
        r_id: 43726
        rv_id: 833220
        rule_id: BYUoO0
        version_id: w8TAxWo
        url: https://semgrep.dev/playground/r/w8TAxWo/mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
        origin: community
- id: mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
  patterns:
  - pattern-either:
    - pattern: 'import com.toyberman.RNSslPinningPackage;

        '
    - pattern: 'import org.thoughtcrime.ssl.pinning;

        '
    - pattern: 'new PinningValidationReportTestBroadcastReceiver()

        '
    - pattern: 'new CertificatePinner.Builder()

        '
    - pattern: 'CertificatePinner.Builder()

        '
    - pattern: 'TrustKit.getInstance().getSSLSocketFactory(...)

        '
    - pattern: |
        $X = $R.openRawResource(...);
        ...
        $KS = KeyStore.getInstance(...);
        ...
        $KS.load($X, ...);
        ...
        $T.init($KS);
    - pattern: 'TrustKit.initializeWithNetworkSecurityConfiguration(...);

        '
    - pattern: 'OkHttp2Helper.getPinningInterceptor()

        '
    - pattern: 'OkHttp3Helper.getPinningInterceptor()

        '
    - pattern: 'new PinningHostnameVerifier(...)

        '
    - pattern: 'PinningHelper.getPinnedHttpsURLConnection

        '
    - pattern: |
        $F.openRawResource(...);
        ...
        $X = new Picasso.Builder(...);
  message: This app does not use a TLS/SSL certificate or public key pinning in code
    to detect or prevent MITM attacks in secure communication channel. Please verify
    if pinning is enabled in `network_security_config.xml`.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
    shortlink: https://sg.run/NXEp
    semgrep.dev:
      rule:
        r_id: 43727
        rv_id: 833221
        rule_id: DbUL4y
        version_id: xyTNeR5
        url: https://semgrep.dev/playground/r/xyTNeR5/mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
        origin: community
- id: mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("=~/AES\/ECB.*/i")

        '
  message: The App uses ECB mode in Cryptographic encryption algorithm. ECB mode is
    known to be weak as it results in the same ciphertext for identical blocks of
    plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
    shortlink: https://sg.run/kRY7
    semgrep.dev:
      rule:
        r_id: 43728
        rv_id: 833222
        rule_id: WAUg2K
        version_id: O9TJWQY
        url: https://semgrep.dev/playground/r/O9TJWQY/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
        origin: community
- id: mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES")

        '
  message: Calling Cipher.getInstance("AES") will return AES ECB mode by default.
    ECB mode is known to be weak as it results in the same ciphertext for identical
    blocks of plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
    shortlink: https://sg.run/wzPY
    semgrep.dev:
      rule:
        r_id: 43729
        rv_id: 833223
        rule_id: 0oUZRX
        version_id: e1TDk4W
        url: https://semgrep.dev/playground/r/e1TDk4W/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
        origin: community
- id: mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
  patterns:
  - pattern-either:
    - pattern: "$S = new SecretKeySpec(\"...\".getBytes(), \"AES\");\n...\n$C.init(...,
        $S); \n"
    - pattern: |
        $P = "...";
        ...
        $S = new SecretKeySpec($P.getBytes(), "AES");
        ...
        $C.init(..., $S);
  message: Hardcoded encryption key makes AES symmetric encryption useless. An attacker
    can easily reverse engineer the application and recover the keys.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-321
    owasp-mobile: m5
    masvs: crypto-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
    shortlink: https://sg.run/xpJz
    semgrep.dev:
      rule:
        r_id: 43730
        rv_id: 833224
        rule_id: KxURB0
        version_id: vdTOzLZ
        url: https://semgrep.dev/playground/r/vdTOzLZ/mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
        origin: community
- id: mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS7Padding")

        '
  message: The App uses the encryption mode CBC with PKCS5/PKCS7 padding. This configuration
    is vulnerable to padding oracle attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-649
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
    shortlink: https://sg.run/OjEB
    semgrep.dev:
      rule:
        r_id: 43731
        rv_id: 833225
        rule_id: qNUrzk
        version_id: d6TKG8D
        url: https://semgrep.dev/playground/r/d6TKG8D/mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
        origin: community
- id: mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {...};
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
    - pattern: |
        byte[] $X = "...".$FUNC(...);
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
  message: The IV for AES CBC mode should be random. A static IV makes the ciphertext
    vulnerable to Chosen Plaintext Attack.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-329
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#predictable-initialization-vector
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
    shortlink: https://sg.run/egDb
    semgrep.dev:
      rule:
        r_id: 43732
        rv_id: 833226
        rule_id: lBUYwL
        version_id: ZRTlPDE
        url: https://semgrep.dev/playground/r/ZRTlPDE/mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
        origin: community
- id: mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
  patterns:
  - pattern-either:
    - pattern: 'import java.util.Random;

        '
    - pattern: 'import java.util.concurrent.ThreadLocalRandom;

        '
  message: The App uses an insecure Random Number Generator.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-330
    owasp-mobile: m5
    masvs: crypto-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-random-number-generators
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
    shortlink: https://sg.run/vo4A
    semgrep.dev:
      rule:
        r_id: 43733
        rv_id: 833227
        rule_id: PeUKqY
        version_id: nWTy4Qq
        url: https://semgrep.dev/playground/r/nWTy4Qq/mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
        origin: community
- id: mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
  patterns:
  - pattern-either:
    - pattern: '$S.getInstance("SSLv3");

        '
  message: SSLv3 is insecure and has multiple known vulnerabilities.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
    shortlink: https://sg.run/dnBZ
    semgrep.dev:
      rule:
        r_id: 43734
        rv_id: 833228
        rule_id: JDU4Ag
        version_id: ExTrDv8
        url: https://semgrep.dev/playground/r/ExTrDv8/mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
        origin: community
- id: mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance($X, ...)

        '
    - pattern: 'javax.crypto.Cipher.getInstance($X, ...)

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}rsa/.{1,23}/nopadding.{0,100})"
  message: This App uses RSA Crypto without OAEP padding. The purpose of the padding
    scheme is to prevent a number of attacks on RSA that only work when the encryption
    is performed without padding.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-780
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
    shortlink: https://sg.run/ZZED
    semgrep.dev:
      rule:
        r_id: 43735
        rv_id: 833229
        rule_id: 5rUx0n
        version_id: 7ZTx9Zg
        url: https://semgrep.dev/playground/r/7ZTx9Zg/mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
        origin: community
- id: mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/sha-1|sha1/i", ...);

        '
    - pattern: 'DigestUtils.sha1Hex(...);

        '
    - pattern: 'DigestUtils.sha1(...);

        '
    - pattern: 'DigestUtils.sha(...);

        '
  message: SHA1 Hash algorithm used. The SHA1 hash is known to have hash collisions.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
    shortlink: https://sg.run/nDyX
    semgrep.dev:
      rule:
        r_id: 43736
        rv_id: 833230
        rule_id: GdUgKL
        version_id: LjTEb97
        url: https://semgrep.dev/playground/r/LjTEb97/mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
        origin: community
- id: mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/des|desede|rc2|rc4|blowfish/i", ...);

        '
    - pattern: "$C = new NullCipher();\n"
  message: Weak encryption algorithm identified. This algorithm is vulnerable to cryptographic
    attacks.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
    shortlink: https://sg.run/EKZw
    semgrep.dev:
      rule:
        r_id: 43737
        rv_id: 833231
        rule_id: ReUdZD
        version_id: 8KTGkgq
        url: https://semgrep.dev/playground/r/8KTGkgq/mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
        origin: community
- id: mobsf.mobsfscan.crypto.weak_hashes.weak_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/md5|md4/i", ...);

        '
    - pattern: "$C.Files.hash(..., Hashing.md5());\n"
    - pattern: 'Files.hash(..., Hashing.md5());

        '
    - pattern: 'DigestUtils.md5Hex(...);

        '
    - pattern: 'DigestUtils.md5(...);

        '
  message: Weak Hash algorithm used. The hash algorithm is known to have hash collisions.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_hashes.weak_hash
    shortlink: https://sg.run/72wZ
    semgrep.dev:
      rule:
        r_id: 43738
        rv_id: 833232
        rule_id: AbUxZk
        version_id: gETy2E1
        url: https://semgrep.dev/playground/r/gETy2E1/mobsf.mobsfscan.crypto.weak_hashes.weak_hash
        origin: community
- id: mobsf.mobsfscan.crypto.weak_iv.weak_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
    - pattern: |
        byte[] $X = {
          0x01,0x02,0x03,0x04,0x05,0x06,0x07
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
  message: The App may use weak IVs like "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00"
    or "0x01,0x02,0x03,0x04,0x05,0x06,0x07". Not using a random IV makes the resulting
    ciphertext much more predictable and susceptible to a dictionary attack.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-1204
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_iv.weak_iv
    shortlink: https://sg.run/LpZr
    semgrep.dev:
      rule:
        r_id: 43739
        rv_id: 833233
        rule_id: BYUonD
        version_id: QkTkrA6
        url: https://semgrep.dev/playground/r/QkTkrA6/mobsf.mobsfscan.crypto.weak_iv.weak_iv
        origin: community
- id: mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
  patterns:
  - pattern-either:
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(1024);
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(512);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp112r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp112r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp224r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp224r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("Blowfish");
        ...
        $K.init(64);
    - pattern: |
        $K = $G.getInstance("AES");
        ...
        $K.init(64);
  message: Cryptographic implementations with insufficient key length is susceptible
    to bruteforce attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-326
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
    shortlink: https://sg.run/8Xey
    semgrep.dev:
      rule:
        r_id: 43740
        rv_id: 833234
        rule_id: DbULZp
        version_id: 3ZT3AWE
        url: https://semgrep.dev/playground/r/3ZT3AWE/mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
        origin: community
- id: mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
  patterns:
  - pattern-either:
    - pattern: |
        import com.fasterxml.jackson.databind.ObjectMapper;
        ...
        $Z.enableDefaultTyping();
  message: The app uses jackson deserialization library. Deserialization of untrusted
    input can result in arbitrary code execution. Consider using HMACs to sign the
    data stream to make sure it is not tampered with, or consider only  transmitting
    object fields and populating a new object.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
    shortlink: https://sg.run/gPzJ
    semgrep.dev:
      rule:
        r_id: 43741
        rv_id: 833235
        rule_id: WAUgAZ
        version_id: 44TQP51
        url: https://semgrep.dev/playground/r/44TQP51/mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
        origin: community
- id: mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
  patterns:
  - pattern: new ObjectInputStream(...);
  severity: WARNING
  languages:
  - java
  message: 'Found object deserialization using ObjectInputStream. Deserializing entire
    Java objects is dangerous because malicious actors can create Java object streams
    with unintended consequences. Ensure that the objects being deserialized are not
    user-controlled. Consider using HMACs to sign the data stream to make sure it
    is not tampered with, or consider only  transmitting object fields and populating
    a new object.

    '
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
    shortlink: https://sg.run/QxZ4
    semgrep.dev:
      rule:
        r_id: 43742
        rv_id: 833236
        rule_id: 0oUZYJ
        version_id: PkTxr20
        url: https://semgrep.dev/playground/r/PkTxr20/mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
        origin: community
- id: mobsf.mobsfscan.injection.command_injection.command_injection
  patterns:
  - pattern-not: Runtime.getRuntime().exec("...", ...);
  - pattern-not: Runtime.getRuntime().exec(new String[] {"...", ...}, ...);
  - pattern-either:
    - pattern: 'Runtime.getRuntime().exec(...);

        '
  message: User controlled strings in exec() will result in command execution.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.command_injection.command_injection
    shortlink: https://sg.run/36wr
    semgrep.dev:
      rule:
        r_id: 43743
        rv_id: 833237
        rule_id: KxUR67
        version_id: JdTlrGl
        url: https://semgrep.dev/playground/r/JdTlrGl/mobsf.mobsfscan.injection.command_injection.command_injection
        origin: community
- id: mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
  patterns:
  - pattern-either:
    - pattern: "$RUNTIME.exec($X + $Y);"
    - pattern: "$RUNTIME.exec(String.format(...));"
    - pattern: "$RUNTIME.loadLibrary($X + $Y);"
    - pattern: "$RUNTIME.loadLibrary(String.format(...));"
    - patterns:
      - pattern-either:
        - pattern: '$RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)

            '
        - pattern: '$RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)

            '
        - pattern: '$RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)

            '
        - patterns:
          - pattern-either:
            - pattern: '$RUNTIME.exec($CMD,"-c",$ARG,...)

                '
            - pattern: '$RUNTIME.exec(Arrays.asList($CMD,"-c",$ARG,...),...)

                '
            - pattern: '$RUNTIME.exec(new String[]{$CMD,"-c",$ARG,...},...)

                '
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
              ...
      - pattern-not-inside: |
          $ARG = "...";
          ...
      - pattern-not: '$RUNTIME.exec("...","...","...",...)

          '
      - pattern-not: '$RUNTIME.exec(new String[]{"...","...","...",...},...)

          '
      - pattern-not: '$RUNTIME.exec(Arrays.asList("...","...","...",...),...)

          '
  - pattern-inside: |
      $TYPE $RUNTIME = Runtime.getRuntime(...);
      ...
  message: 'A formatted or concatenated string was detected as input to a java.lang.Runtime
    call. This is dangerous if a variable is controlled by user input and could result
    in a command injection. Ensure your variables are not controlled by users or sufficiently
    sanitized.

    '
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
    shortlink: https://sg.run/4oQl
    semgrep.dev:
      rule:
        r_id: 43744
        rv_id: 833238
        rule_id: qNUrPW
        version_id: 5PTyDrN
        url: https://semgrep.dev/playground/r/5PTyDrN/mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
        origin: community
- id: mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
  patterns:
  - pattern-not: $DB.execSQL("..." , ...);
  - pattern-not: $DB.rawQuery("..." , ...);
  - pattern-either:
    - pattern: '$DB.rawQuery("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." , ... );

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2 + "...", ...);

        '
    - pattern: '$DB.execSQL($INP + "..." , ...);

        '
    - pattern: '$DB.execSQL("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2 + "...", ...);

        '
  message: App uses SQLite Database and execute raw SQL query. Untrusted user input
    in raw SQL queries can cause SQL Injection. Also sensitive information should
    be encrypted and written to the database.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
    shortlink: https://sg.run/PxZY
    semgrep.dev:
      rule:
        r_id: 43745
        rv_id: 833239
        rule_id: lBUYAy
        version_id: GxTDEYP
        url: https://semgrep.dev/playground/r/GxTDEYP/mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
        origin: community
- id: mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
  patterns:
  - pattern-either:
    - pattern: "$X.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER\n"
    - pattern: "$X.setHostnameVerifier($Z.ALLOW_ALL_HOSTNAME_VERIFIER);\n"
    - pattern: "$X.setHostnameVerifier(new AllowAllHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier(new NullHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier((HostnameVerifier) new NullHostnameVerifier());\n"
    - pattern: |
        $RET verify(..., SSLSession $X) {
          ...
          return true;
        }
    - pattern: |
        $Y = SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Y = $S.SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Z = new TLSClientParameters(...);
        ...
        $Z.setDisableCNCheck(true);
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  return new X509Certificate[]{};\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          return new java.security.cert.X509Certificate[]{};
        }
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  $Y = new X509Certificate[]{};\n
        \ ...\n  return $Y;\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return new X509Certificate[0];
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          $X =  new X509Certificate[0];
          ...
          return $X;
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return null;
        }
    - pattern: 'sslContext.init(null, ...);

        '
    - pattern: 'setSslSocketFactory(new NonValidatingSSLSocketFactory());

        '
  message: Insecure Implementation of SSL. Trusting all the certificates or accepting
    self signed certificates is a critical Security Hole. This application is vulnerable
    to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-endpoint-identify-verification-mstg-network-3
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
    shortlink: https://sg.run/JoZw
    semgrep.dev:
      rule:
        r_id: 43746
        rv_id: 833240
        rule_id: YGUxKY
        version_id: RGTKGnk
        url: https://semgrep.dev/playground/r/RGTKGnk/mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
        origin: community
- id: mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
  patterns:
  - pattern-either:
    - pattern: 'new DefaultHttpClient()

        '
  message: DefaultHTTPClient() with default constructor is not compatible with TLS
    1.2.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-757
    owasp-mobile: m3
    masvs: network-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04f-Testing-Network-Communication.md#verifying-data-encryption-on-the-network-mstg-network-1-and-mstg-network-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
    shortlink: https://sg.run/5zwA
    semgrep.dev:
      rule:
        r_id: 43747
        rv_id: 833241
        rule_id: 6JUkwx
        version_id: A8T370X
        url: https://semgrep.dev/playground/r/A8T370X/mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
        origin: community
- id: mobsf.mobsfscan.webview.webview_allow_file_from_url.webview_allow_file_from_url
  patterns:
  - pattern-either:
    - pattern: 'setAllowFileAccessFromFileURLs(true)

        '
    - pattern: "$W.setAllowFileAccessFromFileURLs(true)\n"
    - pattern: |
        $X = true;
        ...
        $W.setAllowFileAccessFromFileURLs($X);
    - pattern: 'setAllowUniversalAccessFromFileURLs(true)

        '
    - pattern: "$W.setAllowUniversalAccessFromFileURLs(true)\n"
    - pattern: |
        $X = true;
        ...
        $W.setAllowUniversalAccessFromFileURLs($X);
  message: Ensure that user controlled URLs never reaches the Webview. Enabling file
    access from URLs in WebView can leak sensitive information from the file system.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-200
    owasp-mobile: m1
    masvs: platform-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#static-analysis-6
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_allow_file_from_url.webview_allow_file_from_url
    shortlink: https://sg.run/wdPz0
    semgrep.dev:
      rule:
        r_id: 134573
        rv_id: 833242
        rule_id: QrUWlLB
        version_id: BjTe0Jk
        url: https://semgrep.dev/playground/r/BjTe0Jk/mobsf.mobsfscan.webview.webview_allow_file_from_url.webview_allow_file_from_url
        origin: community
- id: mobsf.mobsfscan.webview.webview_debugging.webview_debugging
  patterns:
  - pattern-either:
    - pattern: "$WB.setWebContentsDebuggingEnabled(true);\n"
    - pattern: |
        $X = true;
        ...
        $WB.setWebContentsDebuggingEnabled($X);
  message: Remote WebView debugging is enabled. This allows an attacker with debugging
    access to interact with the webview and steal or corrupt data.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-489
    owasp-mobile: m1
    masvs: resilience-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-anti-debugging-detection-mstg-resilience-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_debugging.webview_debugging
    shortlink: https://sg.run/G3Zp
    semgrep.dev:
      rule:
        r_id: 43748
        rv_id: 833243
        rule_id: oqUPpl
        version_id: DkTG0Xk
        url: https://semgrep.dev/playground/r/DkTG0Xk/mobsf.mobsfscan.webview.webview_debugging.webview_debugging
        origin: community
- id: mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
  patterns:
  - pattern-either:
    - pattern: |
        $X = <... $E.getExternalStorageDirectory() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: "$WV.loadUrl(<... $E.getExternalStorageDirectory().$F() ...>);\n"
    - pattern: |
        $X = <... Environment.getExternalStorageDirectory().$F() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: |
        $X = <... $E.getExternalFilesDir(...) ...>;
        ...
        $WV.loadUrl(<... $X ...>);
  message: WebView load files from external storage. Files in external storage can
    be modified by any application.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
    shortlink: https://sg.run/Rx3O
    semgrep.dev:
      rule:
        r_id: 43749
        rv_id: 833244
        rule_id: zdU90D
        version_id: WrTdpG7
        url: https://semgrep.dev/playground/r/WrTdpG7/mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
        origin: community
- id: mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
  patterns:
  - pattern-either:
    - pattern: "$WB.setAllowFileAccess(true);\n"
  message: WebView File System Access is enabled. An attacker able to inject script
    into a WebView, could exploit the opportunity to access local resources.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-73
    owasp-mobile: m7
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md/#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
    shortlink: https://sg.run/ABgp
    semgrep.dev:
      rule:
        r_id: 43750
        rv_id: 833245
        rule_id: pKUJ40
        version_id: 0bTwbgg
        url: https://semgrep.dev/playground/r/0bTwbgg/mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
        origin: community
- id: mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
  patterns:
  - pattern-either:
    - pattern: |
        $RET onReceivedSslError(WebView $W, SslErrorHandler $H, SslError $E) {
          ...
          $H.proceed();
        }
  message: Insecure WebView Implementation. WebView ignores SSL Certificate errors
    and accept any SSL Certificate. This application is vulnerable to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#webview-server-certificate-verification
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
    shortlink: https://sg.run/BDgW
    semgrep.dev:
      rule:
        r_id: 43751
        rv_id: 833246
        rule_id: 2ZUXop
        version_id: K3Trq83
        url: https://semgrep.dev/playground/r/K3Trq83/mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
        origin: community
- id: mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
  patterns:
  - pattern-either:
    - pattern: 'addJavascriptInterface(...)

        '
    - pattern: "$W.addJavascriptInterface(...)\n"
  message: Ensure that javascript interface is implemented securely. Execution of
    user controlled code in WebView is a  critical Security issue.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
    shortlink: https://sg.run/D0LY
    semgrep.dev:
      rule:
        r_id: 43752
        rv_id: 833247
        rule_id: X5Up0Y
        version_id: qkTQnLe
        url: https://semgrep.dev/playground/r/qkTQnLe/mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
        origin: community
- id: mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
  patterns:
  - pattern: |
      $X $METHOD(...) {
        ...
        new XMLDecoder(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        new XMLDecoder("...");
        ...
      }
  - pattern-not: |-
      $X $METHOD(...) {
        ...
        String $STR = "...";
        ...
        new XMLDecoder($STR);
        ...
      }
  message: |
    XMLDecoder should not be used to parse untrusted data.
    Deserializing user input can lead to arbitrary code execution.
    Use an alternative and explicitly disable external entities.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
    shortlink: https://sg.run/WxP4
    semgrep.dev:
      rule:
        r_id: 43753
        rv_id: 833248
        rule_id: j2Up0D
        version_id: l4TyOoN
        url: https://semgrep.dev/playground/r/l4TyOoN/mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
        origin: community
- id: mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
  pattern: $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities",
    true);
  message: 'XML external entities are enabled for this XMLInputFactory. This is vulnerable
    to XML external entity attacks. Disable external entities by setting "javax.xml.stream.isSupportingExternalEntities"
    to false.

    '
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
    shortlink: https://sg.run/0qwv
    semgrep.dev:
      rule:
        r_id: 43754
        rv_id: 833249
        rule_id: 10UnwQ
        version_id: YDTl0kz
        url: https://semgrep.dev/playground/r/YDTl0kz/mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
        origin: community
- id: mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty(java.xml.stream.XMLFactoryInput.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        ...
      }
  - pattern-either:
    - pattern: "$XMLFACTORY = $W.newFactory(...);"
    - pattern: "$XMLFACTORY = new XMLInputFactory(...);"
  message: 'XML external entities are not explicitly disabled for this XMLInputFactory.
    This could be vulnerable to XML external entity vulnerabilities. Explicitly disable
    external entities by setting "javax.xml.stream.isSupportingExternalEntities" to
    false.

    '
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
    shortlink: https://sg.run/KzZ7
    semgrep.dev:
      rule:
        r_id: 43755
        rv_id: 833250
        rule_id: 9AUL9X
        version_id: JdTlrG4
        url: https://semgrep.dev/playground/r/JdTlrG4/mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
        origin: community
- id: trailofbits.jvm.gc-call.gc-call
  message: |
    Calling `gc` suggests to the JVM that the garbage collector should be
    run, and memory should be reclaimed. This is only a suggestion, and there
    is no guarantee that anything will happen. Relying on this behavior for
    correctness or memory management is an anti-pattern.
  languages:
  - java
  - kotlin
  severity: WARNING
  metadata:
    category: best-practice
    subcategory:
    - audit
    technology:
    - java
    - kotlin
    confidence: HIGH
    likelihood: HIGH
    impact: LOW
    references:
    - https://stackoverflow.com/questions/2414105/why-is-it-bad-practice-to-call-system-gc
    license: AGPL-3.0 license
    source: https://semgrep.dev/r/trailofbits.jvm.gc-call.gc-call
    shortlink: https://sg.run/9ApQ0
    semgrep.dev:
      rule:
        r_id: 113223
        rv_id: 833287
        rule_id: 5rUdoB9
        version_id: LjTEbBG
        url: https://semgrep.dev/playground/r/LjTEbBG/trailofbits.jvm.gc-call.gc-call
        origin: community
  pattern-either:
  - pattern: System.gc()
  - pattern: Runtime.getRuntime().gc()
- id: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
  message: Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid
    mixing these libraries for efficiency and proper ONNX loading
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: MEDIUM
    technology:
    - pytorch
    - numpy
    description: Uses of `NumPy` functions inside `PyTorch` modules
    references:
    - https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects
    license: AGPL-3.0 license
    source: https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
    shortlink: https://sg.run/9vxr
    semgrep.dev:
      rule:
        r_id: 17167
        rv_id: 833295
        rule_id: KxU507
        version_id: 5PTyDEK
        url: https://semgrep.dev/playground/r/5PTyDEK/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
        origin: community
  patterns:
  - pattern-either:
    - pattern: numpy.$FN(...)
    - pattern: numpy. ... .$FN(...)
  - pattern-inside: |
      class $MODULE(torch.nn.Module):
          ...
- id: trailofbits.python.pytorch-tensor.pytorch-tensor
  message: Avoid using `torch.Tensor()` to directly create a tensor for efficiency
    and proper parsing
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: HIGH
    technology:
    - pytorch
    description: Possible parsing issues and inefficiency from improper tensor creation
    references:
    - https://pytorch.org/docs/stable/tensors.html
    license: AGPL-3.0 license
    source: https://semgrep.dev/r/trailofbits.python.pytorch-tensor.pytorch-tensor
    shortlink: https://sg.run/72xG
    semgrep.dev:
      rule:
        r_id: 44138
        rv_id: 833308
        rule_id: JDU4RQ
        version_id: o5TBEJD
        url: https://semgrep.dev/playground/r/o5TBEJD/trailofbits.python.pytorch-tensor.pytorch-tensor
        origin: community
  pattern: torch.Tensor(...)
