rules:
  - id: browser-dependency-inversion
    metadata:
      author: Brian Johnson <bjohnson@brave.com>
      references:
        - https://chromium.googlesource.com/chromium/src/+/main/docs/chrome_browser_design_principles.md#structure_modularity
      source: https://github.com/brave/security-action/blob/main/assets/opengrep_rules/client/browser-dependency-inversion.yaml
      assignees: |
        goodov
        cdesouza-chromium
        bridiver
      category: correctness
    message: |
      There are several global functions that facilitate dependency inversion. It will not be possible to call them from modularized features (no dependency cycles), and their usage in non-modularized features is considered a red flag

      Don't use Browser*. This is functionally a container of hundreds of other pointers. It is impossible to specify dependencies, since Browser* functionally depends on everything. Instead, pass in the relevant pointers, e.g. Profile*, FooFeatureController, etc

      References:
      - https://chromium.googlesource.com/chromium/src/+/main/docs/chrome_browser_design_principles.md#structure_modularity
    severity: INFO
    languages:
      - cpp
    pattern-either:
      - patterns:
        - pattern: $FUNC(...)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(chrome::)?(FindTabbedBrowser|FindAnyBrowser|FindBrowserWithProfile|FindAllTabbedBrowsersWithProfile|FindAllBrowsersWithProfile|FindBrowserWithID|FindBrowserWithWindow|FindBrowserWithActiveWindow|FindBrowserWithTab|FindBrowserWithGroup|FindBrowserWithUiElementContext|FindLastActiveWithProfile|FindLastActive|BrowserView::GetBrowserViewForNativeWindow|BrowserView::FindBrowserWindowWithWebContents)$
      - patterns:
        - pattern: $RETURN $FUNC(..., Browser* $BROWSER, ...) { ... }
