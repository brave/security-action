rules:
  - id: raptor-typos
    metadata:
      author: Andrea Brancaleoni <abc@pompel.me>
      original_author: Marco Ivaldi <raptor@0xdeadbeef.info>
      references:
        - https://cwe.mitre.org/data/definitions/480
        - https://cwe.mitre.org/data/definitions/481
        - https://cwe.mitre.org/data/definitions/482
        - https://cwe.mitre.org/data/definitions/483
        - https://g.co/kgs/PCHQjJ
        - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
      confidence: LOW
      license: MIT
      original_source: https://raw.githubusercontent.com/0xdea/semgrep-rules/main/c/typos.yaml
      source: https://github.com/brave/security-action/blob/main/assets/opengrep_rules/client/typos.yaml
      category: security
      # NOTE: common issues with comments are not covered.
      # NOTE: constructs such as assert(var == val) lead to false positives.
    message: >-
      The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways. These types of errors are generally the result of a typo. This rule also covers some other common typo patterns. (see $EXPR1)
    severity: WARNING
    languages:
      - c
      - cpp
    pattern-either:
      # == instead of = in assignment (the ternary operator is not supported by Semgrep)
      - pattern: for ($EXPR1 == $EXPR2; $EXPR3; $EXPR4) ...
      # NOTE: removed since anything similar to DCHECK leads to false positive here
      # - pattern: $EXPR1 == $EXPR2;
      # = instead of == in comparison
      - patterns:
          - pattern: if (<... $EXPR1 = $EXPR2 ...>) ...
          - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) == $EXPR ...>) ...
          - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) != $EXPR ...>) ...
          - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) < $EXPR ...>) ...
          - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) <= $EXPR ...>) ...
          - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) > $EXPR ...>) ...
          - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) >= $EXPR ...>) ...
          - pattern-not-regex: "if\\s*\\(\\s*[_a-zA-Z][_a-zA-Z0-9:<>]{0,40}\\**\\s+\\**[_a-zA-Z][_a-zA-Z0-9]{0,30}\\s*"
          - pattern-not-regex: "if\\s*\\(\\s*[_a-zA-Z][_a-zA-Z0-9*:]{0,40}<[_a-zA-Z][_a-zA-Z0-9:]{0,30}>\\s*"
      # REMOVED: False Positive on Chrome, & instead of && in comparison
      # - patterns:
      #  - pattern: if (<... $EXPR1 & $EXPR2 ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) == $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) != $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) < $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) <= $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) > $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) >= $EXPR ...>) ...
      # REMOVED: False Positive on Chrome, | instead of || in comparison
      # - patterns:
      #  - pattern: if (<... $EXPR1 | $EXPR2 ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) == $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) != $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) < $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) <= $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) > $EXPR ...>) ...
      #  - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) >= $EXPR ...>) ...
      # =+ instead of += (and =- instead of -=)
      - pattern: $EXPR1 =+ $EXPR2
        # - pattern: $EXPR1 =- $EXPR2
      # ; at the end of if() or for() statement
      - pattern: if ($COND);
      - pattern: for ($EXPR1; $EXPR2; $EXPR3);
      # accidental octal conversion
      - patterns:
          - pattern-either:
              - pattern: $TYPE $ARR[$SIZE];
              - pattern: $TYPE $ARR[$SIZE] = $EXPR;
          - metavariable-regex:
              metavariable: $SIZE
              regex: '^0.*'
              # - pattern: if ($COND) $BODY;
